// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: testgen.proto

#include "testgen.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_testgen_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FileCoverageSimplified_testgen_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_testgen_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LineRequest_testgen_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_util_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PredicateInfo_util_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_util_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Progress_util_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_testgen_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProjectContext_testgen_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_testgen_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ProjectRequest_testgen_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_testgen_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProjectTarget_testgen_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_testgen_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SettingsContext_testgen_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_util_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SourceCode_util_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_util_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SourceInfo_util_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_testgen_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SourceLine_testgen_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_testgen_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StubsResponse_testgen_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_testgen_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestFilter_testgen_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_testgen_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestResultObject_testgen_2eproto;
namespace testsgen {
class DummyRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DummyRequest> _instance;
} _DummyRequest_default_instance_;
class DummyResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DummyResponse> _instance;
} _DummyResponse_default_instance_;
class RegisterClientRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegisterClientRequest> _instance;
} _RegisterClientRequest_default_instance_;
class RegisterClientResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegisterClientResponse> _instance;
} _RegisterClientResponse_default_instance_;
class FunctionTypeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FunctionTypeResponse> _instance;
} _FunctionTypeResponse_default_instance_;
class LogChannelRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogChannelRequest> _instance;
} _LogChannelRequest_default_instance_;
class LogEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogEntry> _instance;
} _LogEntry_default_instance_;
class ProjectContextDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProjectContext> _instance;
} _ProjectContext_default_instance_;
class SettingsContextDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SettingsContext> _instance;
} _SettingsContext_default_instance_;
class SnippetRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SnippetRequest> _instance;
} _SnippetRequest_default_instance_;
class ProjectRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProjectRequest> _instance;
} _ProjectRequest_default_instance_;
class FileRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FileRequest> _instance;
} _FileRequest_default_instance_;
class FolderRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FolderRequest> _instance;
} _FolderRequest_default_instance_;
class LineRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LineRequest> _instance;
} _LineRequest_default_instance_;
class FunctionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FunctionRequest> _instance;
} _FunctionRequest_default_instance_;
class ClassRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClassRequest> _instance;
} _ClassRequest_default_instance_;
class AssertionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AssertionRequest> _instance;
} _AssertionRequest_default_instance_;
class PredicateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PredicateRequest> _instance;
} _PredicateRequest_default_instance_;
class StubsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StubsResponse> _instance;
} _StubsResponse_default_instance_;
class TestsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestsResponse> _instance;
} _TestsResponse_default_instance_;
class SourceLineDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SourceLine> _instance;
} _SourceLine_default_instance_;
class FileCoverageSimplifiedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FileCoverageSimplified> _instance;
} _FileCoverageSimplified_default_instance_;
class TestFilterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestFilter> _instance;
} _TestFilter_default_instance_;
class CoverageAndResultsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CoverageAndResultsRequest> _instance;
} _CoverageAndResultsRequest_default_instance_;
class TestResultObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestResultObject> _instance;
} _TestResultObject_default_instance_;
class CoverageAndResultsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CoverageAndResultsResponse> _instance;
} _CoverageAndResultsResponse_default_instance_;
class HeartbeatResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HeartbeatResponse> _instance;
} _HeartbeatResponse_default_instance_;
class ProjectConfigRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProjectConfigRequest> _instance;
} _ProjectConfigRequest_default_instance_;
class ProjectConfigResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProjectConfigResponse> _instance;
} _ProjectConfigResponse_default_instance_;
class ProjectTargetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProjectTarget> _instance;
} _ProjectTarget_default_instance_;
class ProjectTargetsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProjectTargetsRequest> _instance;
} _ProjectTargetsRequest_default_instance_;
class ProjectTargetsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProjectTargetsResponse> _instance;
} _ProjectTargetsResponse_default_instance_;
class FileTargetsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FileTargetsRequest> _instance;
} _FileTargetsRequest_default_instance_;
class FileTargetsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FileTargetsResponse> _instance;
} _FileTargetsResponse_default_instance_;
}  // namespace testsgen
static void InitDefaultsscc_info_AssertionRequest_testgen_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::testsgen::_AssertionRequest_default_instance_;
    new (ptr) ::testsgen::AssertionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::testsgen::AssertionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AssertionRequest_testgen_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AssertionRequest_testgen_2eproto}, {
      &scc_info_LineRequest_testgen_2eproto.base,}};

static void InitDefaultsscc_info_ClassRequest_testgen_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::testsgen::_ClassRequest_default_instance_;
    new (ptr) ::testsgen::ClassRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::testsgen::ClassRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClassRequest_testgen_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ClassRequest_testgen_2eproto}, {
      &scc_info_LineRequest_testgen_2eproto.base,}};

static void InitDefaultsscc_info_CoverageAndResultsRequest_testgen_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::testsgen::_CoverageAndResultsRequest_default_instance_;
    new (ptr) ::testsgen::CoverageAndResultsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::testsgen::CoverageAndResultsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CoverageAndResultsRequest_testgen_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_CoverageAndResultsRequest_testgen_2eproto}, {
      &scc_info_ProjectContext_testgen_2eproto.base,
      &scc_info_SettingsContext_testgen_2eproto.base,
      &scc_info_TestFilter_testgen_2eproto.base,}};

static void InitDefaultsscc_info_CoverageAndResultsResponse_testgen_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::testsgen::_CoverageAndResultsResponse_default_instance_;
    new (ptr) ::testsgen::CoverageAndResultsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::testsgen::CoverageAndResultsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CoverageAndResultsResponse_testgen_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_CoverageAndResultsResponse_testgen_2eproto}, {
      &scc_info_TestResultObject_testgen_2eproto.base,
      &scc_info_FileCoverageSimplified_testgen_2eproto.base,
      &scc_info_Progress_util_2eproto.base,}};

static void InitDefaultsscc_info_DummyRequest_testgen_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::testsgen::_DummyRequest_default_instance_;
    new (ptr) ::testsgen::DummyRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::testsgen::DummyRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DummyRequest_testgen_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DummyRequest_testgen_2eproto}, {}};

static void InitDefaultsscc_info_DummyResponse_testgen_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::testsgen::_DummyResponse_default_instance_;
    new (ptr) ::testsgen::DummyResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::testsgen::DummyResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DummyResponse_testgen_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DummyResponse_testgen_2eproto}, {}};

static void InitDefaultsscc_info_FileCoverageSimplified_testgen_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::testsgen::_FileCoverageSimplified_default_instance_;
    new (ptr) ::testsgen::FileCoverageSimplified();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::testsgen::FileCoverageSimplified::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FileCoverageSimplified_testgen_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FileCoverageSimplified_testgen_2eproto}, {
      &scc_info_SourceLine_testgen_2eproto.base,}};

static void InitDefaultsscc_info_FileRequest_testgen_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::testsgen::_FileRequest_default_instance_;
    new (ptr) ::testsgen::FileRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::testsgen::FileRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FileRequest_testgen_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FileRequest_testgen_2eproto}, {
      &scc_info_ProjectRequest_testgen_2eproto.base,}};

static void InitDefaultsscc_info_FileTargetsRequest_testgen_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::testsgen::_FileTargetsRequest_default_instance_;
    new (ptr) ::testsgen::FileTargetsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::testsgen::FileTargetsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FileTargetsRequest_testgen_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FileTargetsRequest_testgen_2eproto}, {
      &scc_info_ProjectContext_testgen_2eproto.base,}};

static void InitDefaultsscc_info_FileTargetsResponse_testgen_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::testsgen::_FileTargetsResponse_default_instance_;
    new (ptr) ::testsgen::FileTargetsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::testsgen::FileTargetsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FileTargetsResponse_testgen_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FileTargetsResponse_testgen_2eproto}, {
      &scc_info_ProjectTarget_testgen_2eproto.base,}};

static void InitDefaultsscc_info_FolderRequest_testgen_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::testsgen::_FolderRequest_default_instance_;
    new (ptr) ::testsgen::FolderRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::testsgen::FolderRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FolderRequest_testgen_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FolderRequest_testgen_2eproto}, {
      &scc_info_ProjectRequest_testgen_2eproto.base,}};

static void InitDefaultsscc_info_FunctionRequest_testgen_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::testsgen::_FunctionRequest_default_instance_;
    new (ptr) ::testsgen::FunctionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::testsgen::FunctionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FunctionRequest_testgen_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FunctionRequest_testgen_2eproto}, {
      &scc_info_LineRequest_testgen_2eproto.base,}};

static void InitDefaultsscc_info_FunctionTypeResponse_testgen_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::testsgen::_FunctionTypeResponse_default_instance_;
    new (ptr) ::testsgen::FunctionTypeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::testsgen::FunctionTypeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FunctionTypeResponse_testgen_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FunctionTypeResponse_testgen_2eproto}, {}};

static void InitDefaultsscc_info_HeartbeatResponse_testgen_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::testsgen::_HeartbeatResponse_default_instance_;
    new (ptr) ::testsgen::HeartbeatResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::testsgen::HeartbeatResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HeartbeatResponse_testgen_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HeartbeatResponse_testgen_2eproto}, {}};

static void InitDefaultsscc_info_LineRequest_testgen_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::testsgen::_LineRequest_default_instance_;
    new (ptr) ::testsgen::LineRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::testsgen::LineRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LineRequest_testgen_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LineRequest_testgen_2eproto}, {
      &scc_info_ProjectRequest_testgen_2eproto.base,
      &scc_info_SourceInfo_util_2eproto.base,}};

static void InitDefaultsscc_info_LogChannelRequest_testgen_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::testsgen::_LogChannelRequest_default_instance_;
    new (ptr) ::testsgen::LogChannelRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::testsgen::LogChannelRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogChannelRequest_testgen_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LogChannelRequest_testgen_2eproto}, {}};

static void InitDefaultsscc_info_LogEntry_testgen_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::testsgen::_LogEntry_default_instance_;
    new (ptr) ::testsgen::LogEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::testsgen::LogEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogEntry_testgen_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LogEntry_testgen_2eproto}, {}};

static void InitDefaultsscc_info_PredicateRequest_testgen_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::testsgen::_PredicateRequest_default_instance_;
    new (ptr) ::testsgen::PredicateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::testsgen::PredicateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PredicateRequest_testgen_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PredicateRequest_testgen_2eproto}, {
      &scc_info_LineRequest_testgen_2eproto.base,
      &scc_info_PredicateInfo_util_2eproto.base,}};

static void InitDefaultsscc_info_ProjectConfigRequest_testgen_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::testsgen::_ProjectConfigRequest_default_instance_;
    new (ptr) ::testsgen::ProjectConfigRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::testsgen::ProjectConfigRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProjectConfigRequest_testgen_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ProjectConfigRequest_testgen_2eproto}, {
      &scc_info_ProjectContext_testgen_2eproto.base,}};

static void InitDefaultsscc_info_ProjectConfigResponse_testgen_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::testsgen::_ProjectConfigResponse_default_instance_;
    new (ptr) ::testsgen::ProjectConfigResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::testsgen::ProjectConfigResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProjectConfigResponse_testgen_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ProjectConfigResponse_testgen_2eproto}, {
      &scc_info_Progress_util_2eproto.base,}};

static void InitDefaultsscc_info_ProjectContext_testgen_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::testsgen::_ProjectContext_default_instance_;
    new (ptr) ::testsgen::ProjectContext();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::testsgen::ProjectContext::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProjectContext_testgen_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProjectContext_testgen_2eproto}, {}};

static void InitDefaultsscc_info_ProjectRequest_testgen_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::testsgen::_ProjectRequest_default_instance_;
    new (ptr) ::testsgen::ProjectRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::testsgen::ProjectRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ProjectRequest_testgen_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ProjectRequest_testgen_2eproto}, {
      &scc_info_ProjectContext_testgen_2eproto.base,
      &scc_info_SettingsContext_testgen_2eproto.base,}};

static void InitDefaultsscc_info_ProjectTarget_testgen_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::testsgen::_ProjectTarget_default_instance_;
    new (ptr) ::testsgen::ProjectTarget();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::testsgen::ProjectTarget::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProjectTarget_testgen_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProjectTarget_testgen_2eproto}, {}};

static void InitDefaultsscc_info_ProjectTargetsRequest_testgen_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::testsgen::_ProjectTargetsRequest_default_instance_;
    new (ptr) ::testsgen::ProjectTargetsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::testsgen::ProjectTargetsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProjectTargetsRequest_testgen_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ProjectTargetsRequest_testgen_2eproto}, {
      &scc_info_ProjectContext_testgen_2eproto.base,}};

static void InitDefaultsscc_info_ProjectTargetsResponse_testgen_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::testsgen::_ProjectTargetsResponse_default_instance_;
    new (ptr) ::testsgen::ProjectTargetsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::testsgen::ProjectTargetsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProjectTargetsResponse_testgen_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ProjectTargetsResponse_testgen_2eproto}, {
      &scc_info_ProjectTarget_testgen_2eproto.base,}};

static void InitDefaultsscc_info_RegisterClientRequest_testgen_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::testsgen::_RegisterClientRequest_default_instance_;
    new (ptr) ::testsgen::RegisterClientRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::testsgen::RegisterClientRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegisterClientRequest_testgen_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RegisterClientRequest_testgen_2eproto}, {}};

static void InitDefaultsscc_info_RegisterClientResponse_testgen_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::testsgen::_RegisterClientResponse_default_instance_;
    new (ptr) ::testsgen::RegisterClientResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::testsgen::RegisterClientResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegisterClientResponse_testgen_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RegisterClientResponse_testgen_2eproto}, {}};

static void InitDefaultsscc_info_SettingsContext_testgen_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::testsgen::_SettingsContext_default_instance_;
    new (ptr) ::testsgen::SettingsContext();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::testsgen::SettingsContext::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SettingsContext_testgen_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SettingsContext_testgen_2eproto}, {}};

static void InitDefaultsscc_info_SnippetRequest_testgen_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::testsgen::_SnippetRequest_default_instance_;
    new (ptr) ::testsgen::SnippetRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::testsgen::SnippetRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SnippetRequest_testgen_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SnippetRequest_testgen_2eproto}, {
      &scc_info_ProjectContext_testgen_2eproto.base,
      &scc_info_SettingsContext_testgen_2eproto.base,}};

static void InitDefaultsscc_info_SourceLine_testgen_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::testsgen::_SourceLine_default_instance_;
    new (ptr) ::testsgen::SourceLine();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::testsgen::SourceLine::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SourceLine_testgen_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SourceLine_testgen_2eproto}, {}};

static void InitDefaultsscc_info_StubsResponse_testgen_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::testsgen::_StubsResponse_default_instance_;
    new (ptr) ::testsgen::StubsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::testsgen::StubsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StubsResponse_testgen_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_StubsResponse_testgen_2eproto}, {
      &scc_info_SourceCode_util_2eproto.base,
      &scc_info_Progress_util_2eproto.base,}};

static void InitDefaultsscc_info_TestFilter_testgen_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::testsgen::_TestFilter_default_instance_;
    new (ptr) ::testsgen::TestFilter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::testsgen::TestFilter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestFilter_testgen_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestFilter_testgen_2eproto}, {}};

static void InitDefaultsscc_info_TestResultObject_testgen_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::testsgen::_TestResultObject_default_instance_;
    new (ptr) ::testsgen::TestResultObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::testsgen::TestResultObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestResultObject_testgen_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestResultObject_testgen_2eproto}, {}};

static void InitDefaultsscc_info_TestsResponse_testgen_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::testsgen::_TestsResponse_default_instance_;
    new (ptr) ::testsgen::TestsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::testsgen::TestsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TestsResponse_testgen_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_TestsResponse_testgen_2eproto}, {
      &scc_info_SourceCode_util_2eproto.base,
      &scc_info_StubsResponse_testgen_2eproto.base,
      &scc_info_Progress_util_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_testgen_2eproto[34];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_testgen_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_testgen_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_testgen_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testsgen::DummyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testsgen::DummyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testsgen::RegisterClientRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::testsgen::RegisterClientRequest, clientid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testsgen::RegisterClientResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::testsgen::RegisterClientResponse, isduplicate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testsgen::FunctionTypeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::testsgen::FunctionTypeResponse, validationtype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testsgen::LogChannelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::testsgen::LogChannelRequest, loglevel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testsgen::LogEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::testsgen::LogEntry, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testsgen::ProjectContext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::testsgen::ProjectContext, projectname_),
  PROTOBUF_FIELD_OFFSET(::testsgen::ProjectContext, projectpath_),
  PROTOBUF_FIELD_OFFSET(::testsgen::ProjectContext, testdirpath_),
  PROTOBUF_FIELD_OFFSET(::testsgen::ProjectContext, builddirrelativepath_),
  PROTOBUF_FIELD_OFFSET(::testsgen::ProjectContext, resultsdirrelativepath_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testsgen::SettingsContext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::testsgen::SettingsContext, generateforstaticfunctions_),
  PROTOBUF_FIELD_OFFSET(::testsgen::SettingsContext, verbose_),
  PROTOBUF_FIELD_OFFSET(::testsgen::SettingsContext, timeoutperfunction_),
  PROTOBUF_FIELD_OFFSET(::testsgen::SettingsContext, timeoutpertest_),
  PROTOBUF_FIELD_OFFSET(::testsgen::SettingsContext, usedeterministicsearcher_),
  PROTOBUF_FIELD_OFFSET(::testsgen::SettingsContext, usestubs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testsgen::SnippetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::testsgen::SnippetRequest, projectcontext_),
  PROTOBUF_FIELD_OFFSET(::testsgen::SnippetRequest, settingscontext_),
  PROTOBUF_FIELD_OFFSET(::testsgen::SnippetRequest, filepath_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testsgen::ProjectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::testsgen::ProjectRequest, projectcontext_),
  PROTOBUF_FIELD_OFFSET(::testsgen::ProjectRequest, settingscontext_),
  PROTOBUF_FIELD_OFFSET(::testsgen::ProjectRequest, sourcepaths_),
  PROTOBUF_FIELD_OFFSET(::testsgen::ProjectRequest, synchronizecode_),
  PROTOBUF_FIELD_OFFSET(::testsgen::ProjectRequest, targetpath_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testsgen::FileRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::testsgen::FileRequest, projectrequest_),
  PROTOBUF_FIELD_OFFSET(::testsgen::FileRequest, filepath_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testsgen::FolderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::testsgen::FolderRequest, projectrequest_),
  PROTOBUF_FIELD_OFFSET(::testsgen::FolderRequest, folderpath_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testsgen::LineRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::testsgen::LineRequest, projectrequest_),
  PROTOBUF_FIELD_OFFSET(::testsgen::LineRequest, sourceinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testsgen::FunctionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::testsgen::FunctionRequest, linerequest_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testsgen::ClassRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::testsgen::ClassRequest, linerequest_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testsgen::AssertionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::testsgen::AssertionRequest, linerequest_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testsgen::PredicateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::testsgen::PredicateRequest, linerequest_),
  PROTOBUF_FIELD_OFFSET(::testsgen::PredicateRequest, predicateinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testsgen::StubsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::testsgen::StubsResponse, stubsources_),
  PROTOBUF_FIELD_OFFSET(::testsgen::StubsResponse, progress_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testsgen::TestsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::testsgen::TestsResponse, testsources_),
  PROTOBUF_FIELD_OFFSET(::testsgen::TestsResponse, stubs_),
  PROTOBUF_FIELD_OFFSET(::testsgen::TestsResponse, progress_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testsgen::SourceLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::testsgen::SourceLine, line_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testsgen::FileCoverageSimplified, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::testsgen::FileCoverageSimplified, filepath_),
  PROTOBUF_FIELD_OFFSET(::testsgen::FileCoverageSimplified, fullcoveragelines_),
  PROTOBUF_FIELD_OFFSET(::testsgen::FileCoverageSimplified, partialcoveragelines_),
  PROTOBUF_FIELD_OFFSET(::testsgen::FileCoverageSimplified, nocoveragelines_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testsgen::TestFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::testsgen::TestFilter, testfilepath_),
  PROTOBUF_FIELD_OFFSET(::testsgen::TestFilter, testname_),
  PROTOBUF_FIELD_OFFSET(::testsgen::TestFilter, testsuite_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testsgen::CoverageAndResultsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::testsgen::CoverageAndResultsRequest, projectcontext_),
  PROTOBUF_FIELD_OFFSET(::testsgen::CoverageAndResultsRequest, settingscontext_),
  PROTOBUF_FIELD_OFFSET(::testsgen::CoverageAndResultsRequest, testfilter_),
  PROTOBUF_FIELD_OFFSET(::testsgen::CoverageAndResultsRequest, coverage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testsgen::TestResultObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::testsgen::TestResultObject, testfilepath_),
  PROTOBUF_FIELD_OFFSET(::testsgen::TestResultObject, testname_),
  PROTOBUF_FIELD_OFFSET(::testsgen::TestResultObject, status_),
  PROTOBUF_FIELD_OFFSET(::testsgen::TestResultObject, output_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testsgen::CoverageAndResultsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::testsgen::CoverageAndResultsResponse, testrunresults_),
  PROTOBUF_FIELD_OFFSET(::testsgen::CoverageAndResultsResponse, coverages_),
  PROTOBUF_FIELD_OFFSET(::testsgen::CoverageAndResultsResponse, progress_),
  PROTOBUF_FIELD_OFFSET(::testsgen::CoverageAndResultsResponse, errormessage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testsgen::HeartbeatResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::testsgen::HeartbeatResponse, linked_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testsgen::ProjectConfigRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::testsgen::ProjectConfigRequest, projectcontext_),
  PROTOBUF_FIELD_OFFSET(::testsgen::ProjectConfigRequest, configmode_),
  PROTOBUF_FIELD_OFFSET(::testsgen::ProjectConfigRequest, cmakeoptions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testsgen::ProjectConfigResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::testsgen::ProjectConfigResponse, type_),
  PROTOBUF_FIELD_OFFSET(::testsgen::ProjectConfigResponse, message_),
  PROTOBUF_FIELD_OFFSET(::testsgen::ProjectConfigResponse, progress_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testsgen::ProjectTarget, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::testsgen::ProjectTarget, name_),
  PROTOBUF_FIELD_OFFSET(::testsgen::ProjectTarget, path_),
  PROTOBUF_FIELD_OFFSET(::testsgen::ProjectTarget, description_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testsgen::ProjectTargetsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::testsgen::ProjectTargetsRequest, projectcontext_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testsgen::ProjectTargetsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::testsgen::ProjectTargetsResponse, targets_),
  PROTOBUF_FIELD_OFFSET(::testsgen::ProjectTargetsResponse, prioritytarget_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testsgen::FileTargetsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::testsgen::FileTargetsRequest, path_),
  PROTOBUF_FIELD_OFFSET(::testsgen::FileTargetsRequest, projectcontext_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::testsgen::FileTargetsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::testsgen::FileTargetsResponse, targets_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::testsgen::DummyRequest)},
  { 5, -1, sizeof(::testsgen::DummyResponse)},
  { 10, -1, sizeof(::testsgen::RegisterClientRequest)},
  { 16, -1, sizeof(::testsgen::RegisterClientResponse)},
  { 22, -1, sizeof(::testsgen::FunctionTypeResponse)},
  { 28, -1, sizeof(::testsgen::LogChannelRequest)},
  { 34, -1, sizeof(::testsgen::LogEntry)},
  { 40, -1, sizeof(::testsgen::ProjectContext)},
  { 50, -1, sizeof(::testsgen::SettingsContext)},
  { 61, -1, sizeof(::testsgen::SnippetRequest)},
  { 69, -1, sizeof(::testsgen::ProjectRequest)},
  { 79, -1, sizeof(::testsgen::FileRequest)},
  { 86, -1, sizeof(::testsgen::FolderRequest)},
  { 93, -1, sizeof(::testsgen::LineRequest)},
  { 100, -1, sizeof(::testsgen::FunctionRequest)},
  { 106, -1, sizeof(::testsgen::ClassRequest)},
  { 112, -1, sizeof(::testsgen::AssertionRequest)},
  { 118, -1, sizeof(::testsgen::PredicateRequest)},
  { 125, -1, sizeof(::testsgen::StubsResponse)},
  { 132, -1, sizeof(::testsgen::TestsResponse)},
  { 140, -1, sizeof(::testsgen::SourceLine)},
  { 146, -1, sizeof(::testsgen::FileCoverageSimplified)},
  { 155, -1, sizeof(::testsgen::TestFilter)},
  { 163, -1, sizeof(::testsgen::CoverageAndResultsRequest)},
  { 172, -1, sizeof(::testsgen::TestResultObject)},
  { 181, -1, sizeof(::testsgen::CoverageAndResultsResponse)},
  { 190, -1, sizeof(::testsgen::HeartbeatResponse)},
  { 196, -1, sizeof(::testsgen::ProjectConfigRequest)},
  { 204, -1, sizeof(::testsgen::ProjectConfigResponse)},
  { 212, -1, sizeof(::testsgen::ProjectTarget)},
  { 220, -1, sizeof(::testsgen::ProjectTargetsRequest)},
  { 226, -1, sizeof(::testsgen::ProjectTargetsResponse)},
  { 233, -1, sizeof(::testsgen::FileTargetsRequest)},
  { 240, -1, sizeof(::testsgen::FileTargetsResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::testsgen::_DummyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::testsgen::_DummyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::testsgen::_RegisterClientRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::testsgen::_RegisterClientResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::testsgen::_FunctionTypeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::testsgen::_LogChannelRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::testsgen::_LogEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::testsgen::_ProjectContext_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::testsgen::_SettingsContext_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::testsgen::_SnippetRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::testsgen::_ProjectRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::testsgen::_FileRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::testsgen::_FolderRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::testsgen::_LineRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::testsgen::_FunctionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::testsgen::_ClassRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::testsgen::_AssertionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::testsgen::_PredicateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::testsgen::_StubsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::testsgen::_TestsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::testsgen::_SourceLine_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::testsgen::_FileCoverageSimplified_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::testsgen::_TestFilter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::testsgen::_CoverageAndResultsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::testsgen::_TestResultObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::testsgen::_CoverageAndResultsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::testsgen::_HeartbeatResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::testsgen::_ProjectConfigRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::testsgen::_ProjectConfigResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::testsgen::_ProjectTarget_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::testsgen::_ProjectTargetsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::testsgen::_ProjectTargetsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::testsgen::_FileTargetsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::testsgen::_FileTargetsResponse_default_instance_),
};

const char descriptor_table_protodef_testgen_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rtestgen.proto\022\010testsgen\032\nutil.proto\"\016\n"
  "\014DummyRequest\"\017\n\rDummyResponse\")\n\025Regist"
  "erClientRequest\022\020\n\010clientId\030\001 \001(\t\"-\n\026Reg"
  "isterClientResponse\022\023\n\013isDuplicate\030\001 \001(\010"
  "\"H\n\024FunctionTypeResponse\0220\n\016validationTy"
  "pe\030\001 \001(\0162\030.testsgen.ValidationType\"%\n\021Lo"
  "gChannelRequest\022\020\n\010logLevel\030\002 \001(\t\"\033\n\010Log"
  "Entry\022\017\n\007message\030\001 \001(\t\"\215\001\n\016ProjectContex"
  "t\022\023\n\013projectName\030\001 \001(\t\022\023\n\013projectPath\030\002 "
  "\001(\t\022\023\n\013testDirPath\030\003 \001(\t\022\034\n\024buildDirRela"
  "tivePath\030\004 \001(\t\022\036\n\026resultsDirRelativePath"
  "\030\005 \001(\t\"\256\001\n\017SettingsContext\022\"\n\032generateFo"
  "rStaticFunctions\030\001 \001(\010\022\017\n\007verbose\030\002 \001(\010\022"
  "\032\n\022timeoutPerFunction\030\003 \001(\005\022\026\n\016timeoutPe"
  "rTest\030\004 \001(\005\022 \n\030useDeterministicSearcher\030"
  "\005 \001(\010\022\020\n\010useStubs\030\006 \001(\010\"\210\001\n\016SnippetReque"
  "st\0220\n\016projectContext\030\001 \001(\0132\030.testsgen.Pr"
  "ojectContext\0222\n\017settingsContext\030\002 \001(\0132\031."
  "testsgen.SettingsContext\022\020\n\010filePath\030\003 \001"
  "(\t\"\270\001\n\016ProjectRequest\0220\n\016projectContext\030"
  "\001 \001(\0132\030.testsgen.ProjectContext\0222\n\017setti"
  "ngsContext\030\002 \001(\0132\031.testsgen.SettingsCont"
  "ext\022\023\n\013sourcePaths\030\003 \003(\t\022\027\n\017synchronizeC"
  "ode\030\004 \001(\010\022\022\n\ntargetPath\030\005 \001(\t\"Q\n\013FileReq"
  "uest\0220\n\016projectRequest\030\001 \001(\0132\030.testsgen."
  "ProjectRequest\022\020\n\010filePath\030\002 \001(\t\"U\n\rFold"
  "erRequest\0220\n\016projectRequest\030\001 \001(\0132\030.test"
  "sgen.ProjectRequest\022\022\n\nfolderPath\030\002 \001(\t\""
  "i\n\013LineRequest\0220\n\016projectRequest\030\001 \001(\0132\030"
  ".testsgen.ProjectRequest\022(\n\nsourceInfo\030\002"
  " \001(\0132\024.testsgen.SourceInfo\"=\n\017FunctionRe"
  "quest\022*\n\013lineRequest\030\001 \001(\0132\025.testsgen.Li"
  "neRequest\":\n\014ClassRequest\022*\n\013lineRequest"
  "\030\001 \001(\0132\025.testsgen.LineRequest\">\n\020Asserti"
  "onRequest\022*\n\013lineRequest\030\001 \001(\0132\025.testsge"
  "n.LineRequest\"n\n\020PredicateRequest\022*\n\013lin"
  "eRequest\030\001 \001(\0132\025.testsgen.LineRequest\022.\n"
  "\rpredicateInfo\030\002 \001(\0132\027.testsgen.Predicat"
  "eInfo\"`\n\rStubsResponse\022)\n\013stubSources\030\001 "
  "\003(\0132\024.testsgen.SourceCode\022$\n\010progress\030\002 "
  "\001(\0132\022.testsgen.Progress\"\210\001\n\rTestsRespons"
  "e\022)\n\013testSources\030\001 \003(\0132\024.testsgen.Source"
  "Code\022&\n\005stubs\030\002 \001(\0132\027.testsgen.StubsResp"
  "onse\022$\n\010progress\030\003 \001(\0132\022.testsgen.Progre"
  "ss\"\032\n\nSourceLine\022\014\n\004line\030\001 \001(\r\"\276\001\n\026FileC"
  "overageSimplified\022\020\n\010filePath\030\001 \001(\t\022/\n\021f"
  "ullCoverageLines\030\002 \003(\0132\024.testsgen.Source"
  "Line\0222\n\024partialCoverageLines\030\003 \003(\0132\024.tes"
  "tsgen.SourceLine\022-\n\017noCoverageLines\030\004 \003("
  "\0132\024.testsgen.SourceLine\"G\n\nTestFilter\022\024\n"
  "\014testFilePath\030\001 \001(\t\022\020\n\010testName\030\002 \001(\t\022\021\n"
  "\ttestSuite\030\003 \001(\t\"\275\001\n\031CoverageAndResultsR"
  "equest\0220\n\016projectContext\030\001 \001(\0132\030.testsge"
  "n.ProjectContext\0222\n\017settingsContext\030\002 \001("
  "\0132\031.testsgen.SettingsContext\022(\n\ntestFilt"
  "er\030\003 \001(\0132\024.testsgen.TestFilter\022\020\n\010covera"
  "ge\030\004 \001(\010\"p\n\020TestResultObject\022\024\n\014testFile"
  "Path\030\001 \001(\t\022\020\n\010testname\030\002 \001(\t\022$\n\006status\030\003"
  " \001(\0162\024.testsgen.TestStatus\022\016\n\006output\030\004 \001"
  "(\t\"\301\001\n\032CoverageAndResultsResponse\0222\n\016tes"
  "tRunResults\030\001 \003(\0132\032.testsgen.TestResultO"
  "bject\0223\n\tcoverages\030\002 \003(\0132 .testsgen.File"
  "CoverageSimplified\022$\n\010progress\030\003 \001(\0132\022.t"
  "estsgen.Progress\022\024\n\014errorMessage\030\004 \001(\t\"#"
  "\n\021HeartbeatResponse\022\016\n\006linked\030\001 \001(\010\"\210\001\n\024"
  "ProjectConfigRequest\0220\n\016projectContext\030\001"
  " \001(\0132\030.testsgen.ProjectContext\022(\n\nconfig"
  "Mode\030\002 \001(\0162\024.testsgen.ConfigMode\022\024\n\014cmak"
  "eOptions\030\003 \003(\t\"{\n\025ProjectConfigResponse\022"
  "+\n\004type\030\001 \001(\0162\035.testsgen.ProjectConfigSt"
  "atus\022\017\n\007message\030\002 \001(\t\022$\n\010progress\030\003 \001(\0132"
  "\022.testsgen.Progress\"@\n\rProjectTarget\022\014\n\004"
  "name\030\001 \001(\t\022\014\n\004path\030\002 \001(\t\022\023\n\013description\030"
  "\003 \001(\t\"I\n\025ProjectTargetsRequest\0220\n\016projec"
  "tContext\030\001 \001(\0132\030.testsgen.ProjectContext"
  "\"s\n\026ProjectTargetsResponse\022(\n\007targets\030\001 "
  "\003(\0132\027.testsgen.ProjectTarget\022/\n\016priority"
  "Target\030\002 \001(\0132\027.testsgen.ProjectTarget\"T\n"
  "\022FileTargetsRequest\022\014\n\004path\030\001 \001(\t\0220\n\016pro"
  "jectContext\030\002 \001(\0132\030.testsgen.ProjectCont"
  "ext\"\?\n\023FileTargetsResponse\022(\n\007targets\030\001 "
  "\003(\0132\027.testsgen.ProjectTarget*T\n\nTestStat"
  "us\022\017\n\013TEST_PASSED\020\000\022\017\n\013TEST_FAILED\020\001\022\016\n\n"
  "TEST_DEATH\020\002\022\024\n\020TEST_INTERRUPTED\020\003*O\n\nCo"
  "nfigMode\022\t\n\005CHECK\020\000\022\024\n\020CREATE_BUILD_DIR\020"
  "\001\022\027\n\023GENERATE_JSON_FILES\020\002\022\007\n\003ALL\020\003*\336\001\n\023"
  "ProjectConfigStatus\022\t\n\005IS_OK\020\000\022\027\n\023BUILD_"
  "DIR_NOT_FOUND\020\001\022#\n\037COMPILE_COMMANDS_JSON"
  "_NOT_FOUND\020\002\022 \n\034LINK_COMMANDS_JSON_NOT_F"
  "OUND\020\003\022\035\n\031BUILD_DIR_CREATION_FAILED\020\004\022\036\n"
  "\032RUN_JSON_GENERATION_FAILED\020\005\022\035\n\031BUILD_D"
  "IR_SAME_AS_PROJECT\020\0062\347\016\n\017TestsGenService"
  "\022>\n\tHandshake\022\026.testsgen.DummyRequest\032\027."
  "testsgen.DummyResponse\"\000\022B\n\tHeartbeat\022\026."
  "testsgen.DummyRequest\032\033.testsgen.Heartbe"
  "atResponse\"\000\022E\n\016OpenLogChannel\022\033.testsge"
  "n.LogChannelRequest\032\022.testsgen.LogEntry\""
  "\0000\001\022D\n\017CloseLogChannel\022\026.testsgen.DummyR"
  "equest\032\027.testsgen.DummyResponse\"\000\022G\n\020Ope"
  "nGTestChannel\022\033.testsgen.LogChannelReque"
  "st\032\022.testsgen.LogEntry\"\0000\001\022F\n\021CloseGTest"
  "Channel\022\026.testsgen.DummyRequest\032\027.testsg"
  "en.DummyResponse\"\000\022L\n\016RegisterClient\022\037.t"
  "estsgen.RegisterClientRequest\032\027.testsgen"
  ".DummyResponse\"\000\022T\n\025GetFunctionReturnTyp"
  "e\022\031.testsgen.FunctionRequest\032\036.testsgen."
  "FunctionTypeResponse\"\000\022M\n\024GenerateSnippe"
  "tTests\022\030.testsgen.SnippetRequest\032\027.tests"
  "gen.TestsResponse\"\0000\001\022M\n\024GenerateProject"
  "Tests\022\030.testsgen.ProjectRequest\032\027.testsg"
  "en.TestsResponse\"\0000\001\022G\n\021GenerateFileTest"
  "s\022\025.testsgen.FileRequest\032\027.testsgen.Test"
  "sResponse\"\0000\001\022O\n\025GenerateFunctionTests\022\031"
  ".testsgen.FunctionRequest\032\027.testsgen.Tes"
  "tsResponse\"\0000\001\022I\n\022GenerateClassTests\022\026.t"
  "estsgen.ClassRequest\032\027.testsgen.TestsRes"
  "ponse\"\0000\001\022K\n\023GenerateFolderTests\022\027.tests"
  "gen.FolderRequest\032\027.testsgen.TestsRespon"
  "se\"\0000\001\022G\n\021GenerateLineTests\022\025.testsgen.L"
  "ineRequest\032\027.testsgen.TestsResponse\"\0000\001\022"
  "U\n\032GenerateAssertionFailTests\022\032.testsgen"
  ".AssertionRequest\032\027.testsgen.TestsRespon"
  "se\"\0000\001\022Q\n\026GeneratePredicateTests\022\032.tests"
  "gen.PredicateRequest\032\027.testsgen.TestsRes"
  "ponse\"\0000\001\022m\n\034CreateTestsCoverageAndResul"
  "t\022#.testsgen.CoverageAndResultsRequest\032$"
  ".testsgen.CoverageAndResultsResponse\"\0000\001"
  "\022M\n\024GenerateProjectStubs\022\030.testsgen.Proj"
  "ectRequest\032\027.testsgen.StubsResponse\"\0000\001\022"
  "J\n\023PrintModulesContent\022\030.testsgen.Projec"
  "tContext\032\027.testsgen.DummyResponse\"\000\022W\n\020C"
  "onfigureProject\022\036.testsgen.ProjectConfig"
  "Request\032\037.testsgen.ProjectConfigResponse"
  "\"\0000\001\022=\n\rGetSourceCode\022\024.testsgen.SourceI"
  "nfo\032\024.testsgen.SourceCode\"\000\022X\n\021GetProjec"
  "tTargets\022\037.testsgen.ProjectTargetsReques"
  "t\032 .testsgen.ProjectTargetsResponse\"\000\022O\n"
  "\016GetFileTargets\022\034.testsgen.FileTargetsRe"
  "quest\032\035.testsgen.FileTargetsResponse\"\000b\006"
  "proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_testgen_2eproto_deps[1] = {
  &::descriptor_table_util_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_testgen_2eproto_sccs[34] = {
  &scc_info_AssertionRequest_testgen_2eproto.base,
  &scc_info_ClassRequest_testgen_2eproto.base,
  &scc_info_CoverageAndResultsRequest_testgen_2eproto.base,
  &scc_info_CoverageAndResultsResponse_testgen_2eproto.base,
  &scc_info_DummyRequest_testgen_2eproto.base,
  &scc_info_DummyResponse_testgen_2eproto.base,
  &scc_info_FileCoverageSimplified_testgen_2eproto.base,
  &scc_info_FileRequest_testgen_2eproto.base,
  &scc_info_FileTargetsRequest_testgen_2eproto.base,
  &scc_info_FileTargetsResponse_testgen_2eproto.base,
  &scc_info_FolderRequest_testgen_2eproto.base,
  &scc_info_FunctionRequest_testgen_2eproto.base,
  &scc_info_FunctionTypeResponse_testgen_2eproto.base,
  &scc_info_HeartbeatResponse_testgen_2eproto.base,
  &scc_info_LineRequest_testgen_2eproto.base,
  &scc_info_LogChannelRequest_testgen_2eproto.base,
  &scc_info_LogEntry_testgen_2eproto.base,
  &scc_info_PredicateRequest_testgen_2eproto.base,
  &scc_info_ProjectConfigRequest_testgen_2eproto.base,
  &scc_info_ProjectConfigResponse_testgen_2eproto.base,
  &scc_info_ProjectContext_testgen_2eproto.base,
  &scc_info_ProjectRequest_testgen_2eproto.base,
  &scc_info_ProjectTarget_testgen_2eproto.base,
  &scc_info_ProjectTargetsRequest_testgen_2eproto.base,
  &scc_info_ProjectTargetsResponse_testgen_2eproto.base,
  &scc_info_RegisterClientRequest_testgen_2eproto.base,
  &scc_info_RegisterClientResponse_testgen_2eproto.base,
  &scc_info_SettingsContext_testgen_2eproto.base,
  &scc_info_SnippetRequest_testgen_2eproto.base,
  &scc_info_SourceLine_testgen_2eproto.base,
  &scc_info_StubsResponse_testgen_2eproto.base,
  &scc_info_TestFilter_testgen_2eproto.base,
  &scc_info_TestResultObject_testgen_2eproto.base,
  &scc_info_TestsResponse_testgen_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_testgen_2eproto_once;
static bool descriptor_table_testgen_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_testgen_2eproto = {
  &descriptor_table_testgen_2eproto_initialized, descriptor_table_protodef_testgen_2eproto, "testgen.proto", 5566,
  &descriptor_table_testgen_2eproto_once, descriptor_table_testgen_2eproto_sccs, descriptor_table_testgen_2eproto_deps, 34, 1,
  schemas, file_default_instances, TableStruct_testgen_2eproto::offsets,
  file_level_metadata_testgen_2eproto, 34, file_level_enum_descriptors_testgen_2eproto, file_level_service_descriptors_testgen_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_testgen_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_testgen_2eproto), true);
namespace testsgen {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TestStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_testgen_2eproto);
  return file_level_enum_descriptors_testgen_2eproto[0];
}
bool TestStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConfigMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_testgen_2eproto);
  return file_level_enum_descriptors_testgen_2eproto[1];
}
bool ConfigMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProjectConfigStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_testgen_2eproto);
  return file_level_enum_descriptors_testgen_2eproto[2];
}
bool ProjectConfigStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void DummyRequest::InitAsDefaultInstance() {
}
class DummyRequest::_Internal {
 public:
};

DummyRequest::DummyRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:testsgen.DummyRequest)
}
DummyRequest::DummyRequest(const DummyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:testsgen.DummyRequest)
}

void DummyRequest::SharedCtor() {
}

DummyRequest::~DummyRequest() {
  // @@protoc_insertion_point(destructor:testsgen.DummyRequest)
  SharedDtor();
}

void DummyRequest::SharedDtor() {
}

void DummyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DummyRequest& DummyRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DummyRequest_testgen_2eproto.base);
  return *internal_default_instance();
}


void DummyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:testsgen.DummyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* DummyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DummyRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testsgen.DummyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testsgen.DummyRequest)
  return target;
}

size_t DummyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testsgen.DummyRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DummyRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:testsgen.DummyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DummyRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DummyRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:testsgen.DummyRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:testsgen.DummyRequest)
    MergeFrom(*source);
  }
}

void DummyRequest::MergeFrom(const DummyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:testsgen.DummyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DummyRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:testsgen.DummyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DummyRequest::CopyFrom(const DummyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testsgen.DummyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DummyRequest::IsInitialized() const {
  return true;
}

void DummyRequest::InternalSwap(DummyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DummyRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DummyResponse::InitAsDefaultInstance() {
}
class DummyResponse::_Internal {
 public:
};

DummyResponse::DummyResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:testsgen.DummyResponse)
}
DummyResponse::DummyResponse(const DummyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:testsgen.DummyResponse)
}

void DummyResponse::SharedCtor() {
}

DummyResponse::~DummyResponse() {
  // @@protoc_insertion_point(destructor:testsgen.DummyResponse)
  SharedDtor();
}

void DummyResponse::SharedDtor() {
}

void DummyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DummyResponse& DummyResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DummyResponse_testgen_2eproto.base);
  return *internal_default_instance();
}


void DummyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:testsgen.DummyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* DummyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DummyResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testsgen.DummyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testsgen.DummyResponse)
  return target;
}

size_t DummyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testsgen.DummyResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DummyResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:testsgen.DummyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DummyResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DummyResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:testsgen.DummyResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:testsgen.DummyResponse)
    MergeFrom(*source);
  }
}

void DummyResponse::MergeFrom(const DummyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:testsgen.DummyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DummyResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:testsgen.DummyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DummyResponse::CopyFrom(const DummyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testsgen.DummyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DummyResponse::IsInitialized() const {
  return true;
}

void DummyResponse::InternalSwap(DummyResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DummyResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RegisterClientRequest::InitAsDefaultInstance() {
}
class RegisterClientRequest::_Internal {
 public:
};

RegisterClientRequest::RegisterClientRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:testsgen.RegisterClientRequest)
}
RegisterClientRequest::RegisterClientRequest(const RegisterClientRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clientid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_clientid().empty()) {
    clientid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.clientid_);
  }
  // @@protoc_insertion_point(copy_constructor:testsgen.RegisterClientRequest)
}

void RegisterClientRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RegisterClientRequest_testgen_2eproto.base);
  clientid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RegisterClientRequest::~RegisterClientRequest() {
  // @@protoc_insertion_point(destructor:testsgen.RegisterClientRequest)
  SharedDtor();
}

void RegisterClientRequest::SharedDtor() {
  clientid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RegisterClientRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegisterClientRequest& RegisterClientRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegisterClientRequest_testgen_2eproto.base);
  return *internal_default_instance();
}


void RegisterClientRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:testsgen.RegisterClientRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clientid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* RegisterClientRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string clientId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_clientid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "testsgen.RegisterClientRequest.clientId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegisterClientRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testsgen.RegisterClientRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string clientId = 1;
  if (this->clientid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientid().data(), static_cast<int>(this->_internal_clientid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testsgen.RegisterClientRequest.clientId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_clientid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testsgen.RegisterClientRequest)
  return target;
}

size_t RegisterClientRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testsgen.RegisterClientRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string clientId = 1;
  if (this->clientid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterClientRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:testsgen.RegisterClientRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterClientRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegisterClientRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:testsgen.RegisterClientRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:testsgen.RegisterClientRequest)
    MergeFrom(*source);
  }
}

void RegisterClientRequest::MergeFrom(const RegisterClientRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:testsgen.RegisterClientRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.clientid().size() > 0) {

    clientid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.clientid_);
  }
}

void RegisterClientRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:testsgen.RegisterClientRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterClientRequest::CopyFrom(const RegisterClientRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testsgen.RegisterClientRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterClientRequest::IsInitialized() const {
  return true;
}

void RegisterClientRequest::InternalSwap(RegisterClientRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  clientid_.Swap(&other->clientid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterClientRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RegisterClientResponse::InitAsDefaultInstance() {
}
class RegisterClientResponse::_Internal {
 public:
};

RegisterClientResponse::RegisterClientResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:testsgen.RegisterClientResponse)
}
RegisterClientResponse::RegisterClientResponse(const RegisterClientResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  isduplicate_ = from.isduplicate_;
  // @@protoc_insertion_point(copy_constructor:testsgen.RegisterClientResponse)
}

void RegisterClientResponse::SharedCtor() {
  isduplicate_ = false;
}

RegisterClientResponse::~RegisterClientResponse() {
  // @@protoc_insertion_point(destructor:testsgen.RegisterClientResponse)
  SharedDtor();
}

void RegisterClientResponse::SharedDtor() {
}

void RegisterClientResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegisterClientResponse& RegisterClientResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegisterClientResponse_testgen_2eproto.base);
  return *internal_default_instance();
}


void RegisterClientResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:testsgen.RegisterClientResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  isduplicate_ = false;
  _internal_metadata_.Clear();
}

const char* RegisterClientResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool isDuplicate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          isduplicate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegisterClientResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testsgen.RegisterClientResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isDuplicate = 1;
  if (this->isduplicate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_isduplicate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testsgen.RegisterClientResponse)
  return target;
}

size_t RegisterClientResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testsgen.RegisterClientResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool isDuplicate = 1;
  if (this->isduplicate() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterClientResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:testsgen.RegisterClientResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterClientResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegisterClientResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:testsgen.RegisterClientResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:testsgen.RegisterClientResponse)
    MergeFrom(*source);
  }
}

void RegisterClientResponse::MergeFrom(const RegisterClientResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:testsgen.RegisterClientResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.isduplicate() != 0) {
    _internal_set_isduplicate(from._internal_isduplicate());
  }
}

void RegisterClientResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:testsgen.RegisterClientResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterClientResponse::CopyFrom(const RegisterClientResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testsgen.RegisterClientResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterClientResponse::IsInitialized() const {
  return true;
}

void RegisterClientResponse::InternalSwap(RegisterClientResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(isduplicate_, other->isduplicate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterClientResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FunctionTypeResponse::InitAsDefaultInstance() {
}
class FunctionTypeResponse::_Internal {
 public:
};

FunctionTypeResponse::FunctionTypeResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:testsgen.FunctionTypeResponse)
}
FunctionTypeResponse::FunctionTypeResponse(const FunctionTypeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  validationtype_ = from.validationtype_;
  // @@protoc_insertion_point(copy_constructor:testsgen.FunctionTypeResponse)
}

void FunctionTypeResponse::SharedCtor() {
  validationtype_ = 0;
}

FunctionTypeResponse::~FunctionTypeResponse() {
  // @@protoc_insertion_point(destructor:testsgen.FunctionTypeResponse)
  SharedDtor();
}

void FunctionTypeResponse::SharedDtor() {
}

void FunctionTypeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FunctionTypeResponse& FunctionTypeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FunctionTypeResponse_testgen_2eproto.base);
  return *internal_default_instance();
}


void FunctionTypeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:testsgen.FunctionTypeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  validationtype_ = 0;
  _internal_metadata_.Clear();
}

const char* FunctionTypeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .testsgen.ValidationType validationType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_validationtype(static_cast<::testsgen::ValidationType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FunctionTypeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testsgen.FunctionTypeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .testsgen.ValidationType validationType = 1;
  if (this->validationtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_validationtype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testsgen.FunctionTypeResponse)
  return target;
}

size_t FunctionTypeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testsgen.FunctionTypeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .testsgen.ValidationType validationType = 1;
  if (this->validationtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_validationtype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FunctionTypeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:testsgen.FunctionTypeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FunctionTypeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FunctionTypeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:testsgen.FunctionTypeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:testsgen.FunctionTypeResponse)
    MergeFrom(*source);
  }
}

void FunctionTypeResponse::MergeFrom(const FunctionTypeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:testsgen.FunctionTypeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.validationtype() != 0) {
    _internal_set_validationtype(from._internal_validationtype());
  }
}

void FunctionTypeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:testsgen.FunctionTypeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FunctionTypeResponse::CopyFrom(const FunctionTypeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testsgen.FunctionTypeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionTypeResponse::IsInitialized() const {
  return true;
}

void FunctionTypeResponse::InternalSwap(FunctionTypeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(validationtype_, other->validationtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FunctionTypeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogChannelRequest::InitAsDefaultInstance() {
}
class LogChannelRequest::_Internal {
 public:
};

LogChannelRequest::LogChannelRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:testsgen.LogChannelRequest)
}
LogChannelRequest::LogChannelRequest(const LogChannelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  loglevel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_loglevel().empty()) {
    loglevel_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.loglevel_);
  }
  // @@protoc_insertion_point(copy_constructor:testsgen.LogChannelRequest)
}

void LogChannelRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogChannelRequest_testgen_2eproto.base);
  loglevel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LogChannelRequest::~LogChannelRequest() {
  // @@protoc_insertion_point(destructor:testsgen.LogChannelRequest)
  SharedDtor();
}

void LogChannelRequest::SharedDtor() {
  loglevel_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LogChannelRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogChannelRequest& LogChannelRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogChannelRequest_testgen_2eproto.base);
  return *internal_default_instance();
}


void LogChannelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:testsgen.LogChannelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  loglevel_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* LogChannelRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string logLevel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_loglevel();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "testsgen.LogChannelRequest.logLevel"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogChannelRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testsgen.LogChannelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string logLevel = 2;
  if (this->loglevel().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_loglevel().data(), static_cast<int>(this->_internal_loglevel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testsgen.LogChannelRequest.logLevel");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_loglevel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testsgen.LogChannelRequest)
  return target;
}

size_t LogChannelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testsgen.LogChannelRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string logLevel = 2;
  if (this->loglevel().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_loglevel());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogChannelRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:testsgen.LogChannelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LogChannelRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogChannelRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:testsgen.LogChannelRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:testsgen.LogChannelRequest)
    MergeFrom(*source);
  }
}

void LogChannelRequest::MergeFrom(const LogChannelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:testsgen.LogChannelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.loglevel().size() > 0) {

    loglevel_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.loglevel_);
  }
}

void LogChannelRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:testsgen.LogChannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogChannelRequest::CopyFrom(const LogChannelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testsgen.LogChannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogChannelRequest::IsInitialized() const {
  return true;
}

void LogChannelRequest::InternalSwap(LogChannelRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  loglevel_.Swap(&other->loglevel_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata LogChannelRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogEntry::InitAsDefaultInstance() {
}
class LogEntry::_Internal {
 public:
};

LogEntry::LogEntry()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:testsgen.LogEntry)
}
LogEntry::LogEntry(const LogEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  // @@protoc_insertion_point(copy_constructor:testsgen.LogEntry)
}

void LogEntry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogEntry_testgen_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LogEntry::~LogEntry() {
  // @@protoc_insertion_point(destructor:testsgen.LogEntry)
  SharedDtor();
}

void LogEntry::SharedDtor() {
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LogEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogEntry& LogEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogEntry_testgen_2eproto.base);
  return *internal_default_instance();
}


void LogEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:testsgen.LogEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* LogEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "testsgen.LogEntry.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testsgen.LogEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testsgen.LogEntry.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testsgen.LogEntry)
  return target;
}

size_t LogEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testsgen.LogEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:testsgen.LogEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const LogEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:testsgen.LogEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:testsgen.LogEntry)
    MergeFrom(*source);
  }
}

void LogEntry::MergeFrom(const LogEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:testsgen.LogEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void LogEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:testsgen.LogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogEntry::CopyFrom(const LogEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testsgen.LogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogEntry::IsInitialized() const {
  return true;
}

void LogEntry::InternalSwap(LogEntry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata LogEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProjectContext::InitAsDefaultInstance() {
}
class ProjectContext::_Internal {
 public:
};

ProjectContext::ProjectContext()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:testsgen.ProjectContext)
}
ProjectContext::ProjectContext(const ProjectContext& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  projectname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_projectname().empty()) {
    projectname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.projectname_);
  }
  projectpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_projectpath().empty()) {
    projectpath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.projectpath_);
  }
  testdirpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_testdirpath().empty()) {
    testdirpath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.testdirpath_);
  }
  builddirrelativepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_builddirrelativepath().empty()) {
    builddirrelativepath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.builddirrelativepath_);
  }
  resultsdirrelativepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_resultsdirrelativepath().empty()) {
    resultsdirrelativepath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resultsdirrelativepath_);
  }
  // @@protoc_insertion_point(copy_constructor:testsgen.ProjectContext)
}

void ProjectContext::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProjectContext_testgen_2eproto.base);
  projectname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  projectpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  testdirpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  builddirrelativepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resultsdirrelativepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ProjectContext::~ProjectContext() {
  // @@protoc_insertion_point(destructor:testsgen.ProjectContext)
  SharedDtor();
}

void ProjectContext::SharedDtor() {
  projectname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  projectpath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  testdirpath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  builddirrelativepath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resultsdirrelativepath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProjectContext::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProjectContext& ProjectContext::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProjectContext_testgen_2eproto.base);
  return *internal_default_instance();
}


void ProjectContext::Clear() {
// @@protoc_insertion_point(message_clear_start:testsgen.ProjectContext)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  projectname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  projectpath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  testdirpath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  builddirrelativepath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resultsdirrelativepath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* ProjectContext::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string projectName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_projectname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "testsgen.ProjectContext.projectName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string projectPath = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_projectpath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "testsgen.ProjectContext.projectPath"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string testDirPath = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_testdirpath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "testsgen.ProjectContext.testDirPath"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string buildDirRelativePath = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_builddirrelativepath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "testsgen.ProjectContext.buildDirRelativePath"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string resultsDirRelativePath = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_resultsdirrelativepath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "testsgen.ProjectContext.resultsDirRelativePath"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProjectContext::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testsgen.ProjectContext)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string projectName = 1;
  if (this->projectname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_projectname().data(), static_cast<int>(this->_internal_projectname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testsgen.ProjectContext.projectName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_projectname(), target);
  }

  // string projectPath = 2;
  if (this->projectpath().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_projectpath().data(), static_cast<int>(this->_internal_projectpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testsgen.ProjectContext.projectPath");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_projectpath(), target);
  }

  // string testDirPath = 3;
  if (this->testdirpath().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_testdirpath().data(), static_cast<int>(this->_internal_testdirpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testsgen.ProjectContext.testDirPath");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_testdirpath(), target);
  }

  // string buildDirRelativePath = 4;
  if (this->builddirrelativepath().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_builddirrelativepath().data(), static_cast<int>(this->_internal_builddirrelativepath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testsgen.ProjectContext.buildDirRelativePath");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_builddirrelativepath(), target);
  }

  // string resultsDirRelativePath = 5;
  if (this->resultsdirrelativepath().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resultsdirrelativepath().data(), static_cast<int>(this->_internal_resultsdirrelativepath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testsgen.ProjectContext.resultsDirRelativePath");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_resultsdirrelativepath(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testsgen.ProjectContext)
  return target;
}

size_t ProjectContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testsgen.ProjectContext)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string projectName = 1;
  if (this->projectname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_projectname());
  }

  // string projectPath = 2;
  if (this->projectpath().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_projectpath());
  }

  // string testDirPath = 3;
  if (this->testdirpath().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_testdirpath());
  }

  // string buildDirRelativePath = 4;
  if (this->builddirrelativepath().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_builddirrelativepath());
  }

  // string resultsDirRelativePath = 5;
  if (this->resultsdirrelativepath().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resultsdirrelativepath());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProjectContext::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:testsgen.ProjectContext)
  GOOGLE_DCHECK_NE(&from, this);
  const ProjectContext* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProjectContext>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:testsgen.ProjectContext)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:testsgen.ProjectContext)
    MergeFrom(*source);
  }
}

void ProjectContext::MergeFrom(const ProjectContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:testsgen.ProjectContext)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.projectname().size() > 0) {

    projectname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.projectname_);
  }
  if (from.projectpath().size() > 0) {

    projectpath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.projectpath_);
  }
  if (from.testdirpath().size() > 0) {

    testdirpath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.testdirpath_);
  }
  if (from.builddirrelativepath().size() > 0) {

    builddirrelativepath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.builddirrelativepath_);
  }
  if (from.resultsdirrelativepath().size() > 0) {

    resultsdirrelativepath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resultsdirrelativepath_);
  }
}

void ProjectContext::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:testsgen.ProjectContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProjectContext::CopyFrom(const ProjectContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testsgen.ProjectContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProjectContext::IsInitialized() const {
  return true;
}

void ProjectContext::InternalSwap(ProjectContext* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  projectname_.Swap(&other->projectname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  projectpath_.Swap(&other->projectpath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  testdirpath_.Swap(&other->testdirpath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  builddirrelativepath_.Swap(&other->builddirrelativepath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  resultsdirrelativepath_.Swap(&other->resultsdirrelativepath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ProjectContext::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SettingsContext::InitAsDefaultInstance() {
}
class SettingsContext::_Internal {
 public:
};

SettingsContext::SettingsContext()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:testsgen.SettingsContext)
}
SettingsContext::SettingsContext(const SettingsContext& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timeoutperfunction_, &from.timeoutperfunction_,
    static_cast<size_t>(reinterpret_cast<char*>(&timeoutpertest_) -
    reinterpret_cast<char*>(&timeoutperfunction_)) + sizeof(timeoutpertest_));
  // @@protoc_insertion_point(copy_constructor:testsgen.SettingsContext)
}

void SettingsContext::SharedCtor() {
  ::memset(&timeoutperfunction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeoutpertest_) -
      reinterpret_cast<char*>(&timeoutperfunction_)) + sizeof(timeoutpertest_));
}

SettingsContext::~SettingsContext() {
  // @@protoc_insertion_point(destructor:testsgen.SettingsContext)
  SharedDtor();
}

void SettingsContext::SharedDtor() {
}

void SettingsContext::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SettingsContext& SettingsContext::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SettingsContext_testgen_2eproto.base);
  return *internal_default_instance();
}


void SettingsContext::Clear() {
// @@protoc_insertion_point(message_clear_start:testsgen.SettingsContext)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&timeoutperfunction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeoutpertest_) -
      reinterpret_cast<char*>(&timeoutperfunction_)) + sizeof(timeoutpertest_));
  _internal_metadata_.Clear();
}

const char* SettingsContext::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool generateForStaticFunctions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          generateforstaticfunctions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool verbose = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          verbose_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 timeoutPerFunction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          timeoutperfunction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 timeoutPerTest = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          timeoutpertest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool useDeterministicSearcher = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          usedeterministicsearcher_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool useStubs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          usestubs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SettingsContext::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testsgen.SettingsContext)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool generateForStaticFunctions = 1;
  if (this->generateforstaticfunctions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_generateforstaticfunctions(), target);
  }

  // bool verbose = 2;
  if (this->verbose() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_verbose(), target);
  }

  // int32 timeoutPerFunction = 3;
  if (this->timeoutperfunction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_timeoutperfunction(), target);
  }

  // int32 timeoutPerTest = 4;
  if (this->timeoutpertest() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_timeoutpertest(), target);
  }

  // bool useDeterministicSearcher = 5;
  if (this->usedeterministicsearcher() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_usedeterministicsearcher(), target);
  }

  // bool useStubs = 6;
  if (this->usestubs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_usestubs(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testsgen.SettingsContext)
  return target;
}

size_t SettingsContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testsgen.SettingsContext)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 timeoutPerFunction = 3;
  if (this->timeoutperfunction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_timeoutperfunction());
  }

  // bool generateForStaticFunctions = 1;
  if (this->generateforstaticfunctions() != 0) {
    total_size += 1 + 1;
  }

  // bool verbose = 2;
  if (this->verbose() != 0) {
    total_size += 1 + 1;
  }

  // bool useDeterministicSearcher = 5;
  if (this->usedeterministicsearcher() != 0) {
    total_size += 1 + 1;
  }

  // bool useStubs = 6;
  if (this->usestubs() != 0) {
    total_size += 1 + 1;
  }

  // int32 timeoutPerTest = 4;
  if (this->timeoutpertest() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_timeoutpertest());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SettingsContext::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:testsgen.SettingsContext)
  GOOGLE_DCHECK_NE(&from, this);
  const SettingsContext* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SettingsContext>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:testsgen.SettingsContext)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:testsgen.SettingsContext)
    MergeFrom(*source);
  }
}

void SettingsContext::MergeFrom(const SettingsContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:testsgen.SettingsContext)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timeoutperfunction() != 0) {
    _internal_set_timeoutperfunction(from._internal_timeoutperfunction());
  }
  if (from.generateforstaticfunctions() != 0) {
    _internal_set_generateforstaticfunctions(from._internal_generateforstaticfunctions());
  }
  if (from.verbose() != 0) {
    _internal_set_verbose(from._internal_verbose());
  }
  if (from.usedeterministicsearcher() != 0) {
    _internal_set_usedeterministicsearcher(from._internal_usedeterministicsearcher());
  }
  if (from.usestubs() != 0) {
    _internal_set_usestubs(from._internal_usestubs());
  }
  if (from.timeoutpertest() != 0) {
    _internal_set_timeoutpertest(from._internal_timeoutpertest());
  }
}

void SettingsContext::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:testsgen.SettingsContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SettingsContext::CopyFrom(const SettingsContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testsgen.SettingsContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SettingsContext::IsInitialized() const {
  return true;
}

void SettingsContext::InternalSwap(SettingsContext* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(timeoutperfunction_, other->timeoutperfunction_);
  swap(generateforstaticfunctions_, other->generateforstaticfunctions_);
  swap(verbose_, other->verbose_);
  swap(usedeterministicsearcher_, other->usedeterministicsearcher_);
  swap(usestubs_, other->usestubs_);
  swap(timeoutpertest_, other->timeoutpertest_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SettingsContext::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SnippetRequest::InitAsDefaultInstance() {
  ::testsgen::_SnippetRequest_default_instance_._instance.get_mutable()->projectcontext_ = const_cast< ::testsgen::ProjectContext*>(
      ::testsgen::ProjectContext::internal_default_instance());
  ::testsgen::_SnippetRequest_default_instance_._instance.get_mutable()->settingscontext_ = const_cast< ::testsgen::SettingsContext*>(
      ::testsgen::SettingsContext::internal_default_instance());
}
class SnippetRequest::_Internal {
 public:
  static const ::testsgen::ProjectContext& projectcontext(const SnippetRequest* msg);
  static const ::testsgen::SettingsContext& settingscontext(const SnippetRequest* msg);
};

const ::testsgen::ProjectContext&
SnippetRequest::_Internal::projectcontext(const SnippetRequest* msg) {
  return *msg->projectcontext_;
}
const ::testsgen::SettingsContext&
SnippetRequest::_Internal::settingscontext(const SnippetRequest* msg) {
  return *msg->settingscontext_;
}
SnippetRequest::SnippetRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:testsgen.SnippetRequest)
}
SnippetRequest::SnippetRequest(const SnippetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filepath().empty()) {
    filepath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filepath_);
  }
  if (from._internal_has_projectcontext()) {
    projectcontext_ = new ::testsgen::ProjectContext(*from.projectcontext_);
  } else {
    projectcontext_ = nullptr;
  }
  if (from._internal_has_settingscontext()) {
    settingscontext_ = new ::testsgen::SettingsContext(*from.settingscontext_);
  } else {
    settingscontext_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:testsgen.SnippetRequest)
}

void SnippetRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SnippetRequest_testgen_2eproto.base);
  filepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&projectcontext_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&settingscontext_) -
      reinterpret_cast<char*>(&projectcontext_)) + sizeof(settingscontext_));
}

SnippetRequest::~SnippetRequest() {
  // @@protoc_insertion_point(destructor:testsgen.SnippetRequest)
  SharedDtor();
}

void SnippetRequest::SharedDtor() {
  filepath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete projectcontext_;
  if (this != internal_default_instance()) delete settingscontext_;
}

void SnippetRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SnippetRequest& SnippetRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SnippetRequest_testgen_2eproto.base);
  return *internal_default_instance();
}


void SnippetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:testsgen.SnippetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filepath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && projectcontext_ != nullptr) {
    delete projectcontext_;
  }
  projectcontext_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && settingscontext_ != nullptr) {
    delete settingscontext_;
  }
  settingscontext_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SnippetRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .testsgen.ProjectContext projectContext = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_projectcontext(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .testsgen.SettingsContext settingsContext = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_settingscontext(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string filePath = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_filepath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "testsgen.SnippetRequest.filePath"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SnippetRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testsgen.SnippetRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .testsgen.ProjectContext projectContext = 1;
  if (this->has_projectcontext()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::projectcontext(this), target, stream);
  }

  // .testsgen.SettingsContext settingsContext = 2;
  if (this->has_settingscontext()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::settingscontext(this), target, stream);
  }

  // string filePath = 3;
  if (this->filepath().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filepath().data(), static_cast<int>(this->_internal_filepath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testsgen.SnippetRequest.filePath");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_filepath(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testsgen.SnippetRequest)
  return target;
}

size_t SnippetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testsgen.SnippetRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string filePath = 3;
  if (this->filepath().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filepath());
  }

  // .testsgen.ProjectContext projectContext = 1;
  if (this->has_projectcontext()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *projectcontext_);
  }

  // .testsgen.SettingsContext settingsContext = 2;
  if (this->has_settingscontext()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *settingscontext_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SnippetRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:testsgen.SnippetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SnippetRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SnippetRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:testsgen.SnippetRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:testsgen.SnippetRequest)
    MergeFrom(*source);
  }
}

void SnippetRequest::MergeFrom(const SnippetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:testsgen.SnippetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filepath().size() > 0) {

    filepath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filepath_);
  }
  if (from.has_projectcontext()) {
    _internal_mutable_projectcontext()->::testsgen::ProjectContext::MergeFrom(from._internal_projectcontext());
  }
  if (from.has_settingscontext()) {
    _internal_mutable_settingscontext()->::testsgen::SettingsContext::MergeFrom(from._internal_settingscontext());
  }
}

void SnippetRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:testsgen.SnippetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnippetRequest::CopyFrom(const SnippetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testsgen.SnippetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnippetRequest::IsInitialized() const {
  return true;
}

void SnippetRequest::InternalSwap(SnippetRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  filepath_.Swap(&other->filepath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(projectcontext_, other->projectcontext_);
  swap(settingscontext_, other->settingscontext_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SnippetRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProjectRequest::InitAsDefaultInstance() {
  ::testsgen::_ProjectRequest_default_instance_._instance.get_mutable()->projectcontext_ = const_cast< ::testsgen::ProjectContext*>(
      ::testsgen::ProjectContext::internal_default_instance());
  ::testsgen::_ProjectRequest_default_instance_._instance.get_mutable()->settingscontext_ = const_cast< ::testsgen::SettingsContext*>(
      ::testsgen::SettingsContext::internal_default_instance());
}
class ProjectRequest::_Internal {
 public:
  static const ::testsgen::ProjectContext& projectcontext(const ProjectRequest* msg);
  static const ::testsgen::SettingsContext& settingscontext(const ProjectRequest* msg);
};

const ::testsgen::ProjectContext&
ProjectRequest::_Internal::projectcontext(const ProjectRequest* msg) {
  return *msg->projectcontext_;
}
const ::testsgen::SettingsContext&
ProjectRequest::_Internal::settingscontext(const ProjectRequest* msg) {
  return *msg->settingscontext_;
}
ProjectRequest::ProjectRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:testsgen.ProjectRequest)
}
ProjectRequest::ProjectRequest(const ProjectRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      sourcepaths_(from.sourcepaths_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  targetpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_targetpath().empty()) {
    targetpath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.targetpath_);
  }
  if (from._internal_has_projectcontext()) {
    projectcontext_ = new ::testsgen::ProjectContext(*from.projectcontext_);
  } else {
    projectcontext_ = nullptr;
  }
  if (from._internal_has_settingscontext()) {
    settingscontext_ = new ::testsgen::SettingsContext(*from.settingscontext_);
  } else {
    settingscontext_ = nullptr;
  }
  synchronizecode_ = from.synchronizecode_;
  // @@protoc_insertion_point(copy_constructor:testsgen.ProjectRequest)
}

void ProjectRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProjectRequest_testgen_2eproto.base);
  targetpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&projectcontext_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&synchronizecode_) -
      reinterpret_cast<char*>(&projectcontext_)) + sizeof(synchronizecode_));
}

ProjectRequest::~ProjectRequest() {
  // @@protoc_insertion_point(destructor:testsgen.ProjectRequest)
  SharedDtor();
}

void ProjectRequest::SharedDtor() {
  targetpath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete projectcontext_;
  if (this != internal_default_instance()) delete settingscontext_;
}

void ProjectRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProjectRequest& ProjectRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProjectRequest_testgen_2eproto.base);
  return *internal_default_instance();
}


void ProjectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:testsgen.ProjectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sourcepaths_.Clear();
  targetpath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && projectcontext_ != nullptr) {
    delete projectcontext_;
  }
  projectcontext_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && settingscontext_ != nullptr) {
    delete settingscontext_;
  }
  settingscontext_ = nullptr;
  synchronizecode_ = false;
  _internal_metadata_.Clear();
}

const char* ProjectRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .testsgen.ProjectContext projectContext = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_projectcontext(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .testsgen.SettingsContext settingsContext = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_settingscontext(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string sourcePaths = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_sourcepaths();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "testsgen.ProjectRequest.sourcePaths"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // bool synchronizeCode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          synchronizecode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string targetPath = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_targetpath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "testsgen.ProjectRequest.targetPath"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProjectRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testsgen.ProjectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .testsgen.ProjectContext projectContext = 1;
  if (this->has_projectcontext()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::projectcontext(this), target, stream);
  }

  // .testsgen.SettingsContext settingsContext = 2;
  if (this->has_settingscontext()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::settingscontext(this), target, stream);
  }

  // repeated string sourcePaths = 3;
  for (int i = 0, n = this->_internal_sourcepaths_size(); i < n; i++) {
    const auto& s = this->_internal_sourcepaths(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testsgen.ProjectRequest.sourcePaths");
    target = stream->WriteString(3, s, target);
  }

  // bool synchronizeCode = 4;
  if (this->synchronizecode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_synchronizecode(), target);
  }

  // string targetPath = 5;
  if (this->targetpath().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_targetpath().data(), static_cast<int>(this->_internal_targetpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testsgen.ProjectRequest.targetPath");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_targetpath(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testsgen.ProjectRequest)
  return target;
}

size_t ProjectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testsgen.ProjectRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string sourcePaths = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(sourcepaths_.size());
  for (int i = 0, n = sourcepaths_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      sourcepaths_.Get(i));
  }

  // string targetPath = 5;
  if (this->targetpath().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_targetpath());
  }

  // .testsgen.ProjectContext projectContext = 1;
  if (this->has_projectcontext()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *projectcontext_);
  }

  // .testsgen.SettingsContext settingsContext = 2;
  if (this->has_settingscontext()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *settingscontext_);
  }

  // bool synchronizeCode = 4;
  if (this->synchronizecode() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProjectRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:testsgen.ProjectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ProjectRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProjectRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:testsgen.ProjectRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:testsgen.ProjectRequest)
    MergeFrom(*source);
  }
}

void ProjectRequest::MergeFrom(const ProjectRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:testsgen.ProjectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sourcepaths_.MergeFrom(from.sourcepaths_);
  if (from.targetpath().size() > 0) {

    targetpath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.targetpath_);
  }
  if (from.has_projectcontext()) {
    _internal_mutable_projectcontext()->::testsgen::ProjectContext::MergeFrom(from._internal_projectcontext());
  }
  if (from.has_settingscontext()) {
    _internal_mutable_settingscontext()->::testsgen::SettingsContext::MergeFrom(from._internal_settingscontext());
  }
  if (from.synchronizecode() != 0) {
    _internal_set_synchronizecode(from._internal_synchronizecode());
  }
}

void ProjectRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:testsgen.ProjectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProjectRequest::CopyFrom(const ProjectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testsgen.ProjectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProjectRequest::IsInitialized() const {
  return true;
}

void ProjectRequest::InternalSwap(ProjectRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  sourcepaths_.InternalSwap(&other->sourcepaths_);
  targetpath_.Swap(&other->targetpath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(projectcontext_, other->projectcontext_);
  swap(settingscontext_, other->settingscontext_);
  swap(synchronizecode_, other->synchronizecode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProjectRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FileRequest::InitAsDefaultInstance() {
  ::testsgen::_FileRequest_default_instance_._instance.get_mutable()->projectrequest_ = const_cast< ::testsgen::ProjectRequest*>(
      ::testsgen::ProjectRequest::internal_default_instance());
}
class FileRequest::_Internal {
 public:
  static const ::testsgen::ProjectRequest& projectrequest(const FileRequest* msg);
};

const ::testsgen::ProjectRequest&
FileRequest::_Internal::projectrequest(const FileRequest* msg) {
  return *msg->projectrequest_;
}
FileRequest::FileRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:testsgen.FileRequest)
}
FileRequest::FileRequest(const FileRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filepath().empty()) {
    filepath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filepath_);
  }
  if (from._internal_has_projectrequest()) {
    projectrequest_ = new ::testsgen::ProjectRequest(*from.projectrequest_);
  } else {
    projectrequest_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:testsgen.FileRequest)
}

void FileRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FileRequest_testgen_2eproto.base);
  filepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  projectrequest_ = nullptr;
}

FileRequest::~FileRequest() {
  // @@protoc_insertion_point(destructor:testsgen.FileRequest)
  SharedDtor();
}

void FileRequest::SharedDtor() {
  filepath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete projectrequest_;
}

void FileRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FileRequest& FileRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FileRequest_testgen_2eproto.base);
  return *internal_default_instance();
}


void FileRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:testsgen.FileRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filepath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && projectrequest_ != nullptr) {
    delete projectrequest_;
  }
  projectrequest_ = nullptr;
  _internal_metadata_.Clear();
}

const char* FileRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .testsgen.ProjectRequest projectRequest = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_projectrequest(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string filePath = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_filepath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "testsgen.FileRequest.filePath"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FileRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testsgen.FileRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .testsgen.ProjectRequest projectRequest = 1;
  if (this->has_projectrequest()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::projectrequest(this), target, stream);
  }

  // string filePath = 2;
  if (this->filepath().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filepath().data(), static_cast<int>(this->_internal_filepath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testsgen.FileRequest.filePath");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_filepath(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testsgen.FileRequest)
  return target;
}

size_t FileRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testsgen.FileRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string filePath = 2;
  if (this->filepath().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filepath());
  }

  // .testsgen.ProjectRequest projectRequest = 1;
  if (this->has_projectrequest()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *projectrequest_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:testsgen.FileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FileRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FileRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:testsgen.FileRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:testsgen.FileRequest)
    MergeFrom(*source);
  }
}

void FileRequest::MergeFrom(const FileRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:testsgen.FileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filepath().size() > 0) {

    filepath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filepath_);
  }
  if (from.has_projectrequest()) {
    _internal_mutable_projectrequest()->::testsgen::ProjectRequest::MergeFrom(from._internal_projectrequest());
  }
}

void FileRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:testsgen.FileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileRequest::CopyFrom(const FileRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testsgen.FileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileRequest::IsInitialized() const {
  return true;
}

void FileRequest::InternalSwap(FileRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  filepath_.Swap(&other->filepath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(projectrequest_, other->projectrequest_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FileRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FolderRequest::InitAsDefaultInstance() {
  ::testsgen::_FolderRequest_default_instance_._instance.get_mutable()->projectrequest_ = const_cast< ::testsgen::ProjectRequest*>(
      ::testsgen::ProjectRequest::internal_default_instance());
}
class FolderRequest::_Internal {
 public:
  static const ::testsgen::ProjectRequest& projectrequest(const FolderRequest* msg);
};

const ::testsgen::ProjectRequest&
FolderRequest::_Internal::projectrequest(const FolderRequest* msg) {
  return *msg->projectrequest_;
}
FolderRequest::FolderRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:testsgen.FolderRequest)
}
FolderRequest::FolderRequest(const FolderRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  folderpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_folderpath().empty()) {
    folderpath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.folderpath_);
  }
  if (from._internal_has_projectrequest()) {
    projectrequest_ = new ::testsgen::ProjectRequest(*from.projectrequest_);
  } else {
    projectrequest_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:testsgen.FolderRequest)
}

void FolderRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FolderRequest_testgen_2eproto.base);
  folderpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  projectrequest_ = nullptr;
}

FolderRequest::~FolderRequest() {
  // @@protoc_insertion_point(destructor:testsgen.FolderRequest)
  SharedDtor();
}

void FolderRequest::SharedDtor() {
  folderpath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete projectrequest_;
}

void FolderRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FolderRequest& FolderRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FolderRequest_testgen_2eproto.base);
  return *internal_default_instance();
}


void FolderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:testsgen.FolderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  folderpath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && projectrequest_ != nullptr) {
    delete projectrequest_;
  }
  projectrequest_ = nullptr;
  _internal_metadata_.Clear();
}

const char* FolderRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .testsgen.ProjectRequest projectRequest = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_projectrequest(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string folderPath = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_folderpath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "testsgen.FolderRequest.folderPath"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FolderRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testsgen.FolderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .testsgen.ProjectRequest projectRequest = 1;
  if (this->has_projectrequest()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::projectrequest(this), target, stream);
  }

  // string folderPath = 2;
  if (this->folderpath().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_folderpath().data(), static_cast<int>(this->_internal_folderpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testsgen.FolderRequest.folderPath");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_folderpath(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testsgen.FolderRequest)
  return target;
}

size_t FolderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testsgen.FolderRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string folderPath = 2;
  if (this->folderpath().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_folderpath());
  }

  // .testsgen.ProjectRequest projectRequest = 1;
  if (this->has_projectrequest()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *projectrequest_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FolderRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:testsgen.FolderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FolderRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FolderRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:testsgen.FolderRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:testsgen.FolderRequest)
    MergeFrom(*source);
  }
}

void FolderRequest::MergeFrom(const FolderRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:testsgen.FolderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.folderpath().size() > 0) {

    folderpath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.folderpath_);
  }
  if (from.has_projectrequest()) {
    _internal_mutable_projectrequest()->::testsgen::ProjectRequest::MergeFrom(from._internal_projectrequest());
  }
}

void FolderRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:testsgen.FolderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FolderRequest::CopyFrom(const FolderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testsgen.FolderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FolderRequest::IsInitialized() const {
  return true;
}

void FolderRequest::InternalSwap(FolderRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  folderpath_.Swap(&other->folderpath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(projectrequest_, other->projectrequest_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FolderRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LineRequest::InitAsDefaultInstance() {
  ::testsgen::_LineRequest_default_instance_._instance.get_mutable()->projectrequest_ = const_cast< ::testsgen::ProjectRequest*>(
      ::testsgen::ProjectRequest::internal_default_instance());
  ::testsgen::_LineRequest_default_instance_._instance.get_mutable()->sourceinfo_ = const_cast< ::testsgen::SourceInfo*>(
      ::testsgen::SourceInfo::internal_default_instance());
}
class LineRequest::_Internal {
 public:
  static const ::testsgen::ProjectRequest& projectrequest(const LineRequest* msg);
  static const ::testsgen::SourceInfo& sourceinfo(const LineRequest* msg);
};

const ::testsgen::ProjectRequest&
LineRequest::_Internal::projectrequest(const LineRequest* msg) {
  return *msg->projectrequest_;
}
const ::testsgen::SourceInfo&
LineRequest::_Internal::sourceinfo(const LineRequest* msg) {
  return *msg->sourceinfo_;
}
void LineRequest::clear_sourceinfo() {
  if (GetArenaNoVirtual() == nullptr && sourceinfo_ != nullptr) {
    delete sourceinfo_;
  }
  sourceinfo_ = nullptr;
}
LineRequest::LineRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:testsgen.LineRequest)
}
LineRequest::LineRequest(const LineRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_projectrequest()) {
    projectrequest_ = new ::testsgen::ProjectRequest(*from.projectrequest_);
  } else {
    projectrequest_ = nullptr;
  }
  if (from._internal_has_sourceinfo()) {
    sourceinfo_ = new ::testsgen::SourceInfo(*from.sourceinfo_);
  } else {
    sourceinfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:testsgen.LineRequest)
}

void LineRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LineRequest_testgen_2eproto.base);
  ::memset(&projectrequest_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sourceinfo_) -
      reinterpret_cast<char*>(&projectrequest_)) + sizeof(sourceinfo_));
}

LineRequest::~LineRequest() {
  // @@protoc_insertion_point(destructor:testsgen.LineRequest)
  SharedDtor();
}

void LineRequest::SharedDtor() {
  if (this != internal_default_instance()) delete projectrequest_;
  if (this != internal_default_instance()) delete sourceinfo_;
}

void LineRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LineRequest& LineRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LineRequest_testgen_2eproto.base);
  return *internal_default_instance();
}


void LineRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:testsgen.LineRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && projectrequest_ != nullptr) {
    delete projectrequest_;
  }
  projectrequest_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && sourceinfo_ != nullptr) {
    delete sourceinfo_;
  }
  sourceinfo_ = nullptr;
  _internal_metadata_.Clear();
}

const char* LineRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .testsgen.ProjectRequest projectRequest = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_projectrequest(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .testsgen.SourceInfo sourceInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sourceinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LineRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testsgen.LineRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .testsgen.ProjectRequest projectRequest = 1;
  if (this->has_projectrequest()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::projectrequest(this), target, stream);
  }

  // .testsgen.SourceInfo sourceInfo = 2;
  if (this->has_sourceinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::sourceinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testsgen.LineRequest)
  return target;
}

size_t LineRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testsgen.LineRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .testsgen.ProjectRequest projectRequest = 1;
  if (this->has_projectrequest()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *projectrequest_);
  }

  // .testsgen.SourceInfo sourceInfo = 2;
  if (this->has_sourceinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sourceinfo_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LineRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:testsgen.LineRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LineRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LineRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:testsgen.LineRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:testsgen.LineRequest)
    MergeFrom(*source);
  }
}

void LineRequest::MergeFrom(const LineRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:testsgen.LineRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_projectrequest()) {
    _internal_mutable_projectrequest()->::testsgen::ProjectRequest::MergeFrom(from._internal_projectrequest());
  }
  if (from.has_sourceinfo()) {
    _internal_mutable_sourceinfo()->::testsgen::SourceInfo::MergeFrom(from._internal_sourceinfo());
  }
}

void LineRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:testsgen.LineRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LineRequest::CopyFrom(const LineRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testsgen.LineRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LineRequest::IsInitialized() const {
  return true;
}

void LineRequest::InternalSwap(LineRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(projectrequest_, other->projectrequest_);
  swap(sourceinfo_, other->sourceinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LineRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FunctionRequest::InitAsDefaultInstance() {
  ::testsgen::_FunctionRequest_default_instance_._instance.get_mutable()->linerequest_ = const_cast< ::testsgen::LineRequest*>(
      ::testsgen::LineRequest::internal_default_instance());
}
class FunctionRequest::_Internal {
 public:
  static const ::testsgen::LineRequest& linerequest(const FunctionRequest* msg);
};

const ::testsgen::LineRequest&
FunctionRequest::_Internal::linerequest(const FunctionRequest* msg) {
  return *msg->linerequest_;
}
FunctionRequest::FunctionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:testsgen.FunctionRequest)
}
FunctionRequest::FunctionRequest(const FunctionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_linerequest()) {
    linerequest_ = new ::testsgen::LineRequest(*from.linerequest_);
  } else {
    linerequest_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:testsgen.FunctionRequest)
}

void FunctionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FunctionRequest_testgen_2eproto.base);
  linerequest_ = nullptr;
}

FunctionRequest::~FunctionRequest() {
  // @@protoc_insertion_point(destructor:testsgen.FunctionRequest)
  SharedDtor();
}

void FunctionRequest::SharedDtor() {
  if (this != internal_default_instance()) delete linerequest_;
}

void FunctionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FunctionRequest& FunctionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FunctionRequest_testgen_2eproto.base);
  return *internal_default_instance();
}


void FunctionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:testsgen.FunctionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && linerequest_ != nullptr) {
    delete linerequest_;
  }
  linerequest_ = nullptr;
  _internal_metadata_.Clear();
}

const char* FunctionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .testsgen.LineRequest lineRequest = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_linerequest(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FunctionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testsgen.FunctionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .testsgen.LineRequest lineRequest = 1;
  if (this->has_linerequest()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::linerequest(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testsgen.FunctionRequest)
  return target;
}

size_t FunctionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testsgen.FunctionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .testsgen.LineRequest lineRequest = 1;
  if (this->has_linerequest()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *linerequest_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FunctionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:testsgen.FunctionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FunctionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FunctionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:testsgen.FunctionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:testsgen.FunctionRequest)
    MergeFrom(*source);
  }
}

void FunctionRequest::MergeFrom(const FunctionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:testsgen.FunctionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_linerequest()) {
    _internal_mutable_linerequest()->::testsgen::LineRequest::MergeFrom(from._internal_linerequest());
  }
}

void FunctionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:testsgen.FunctionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FunctionRequest::CopyFrom(const FunctionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testsgen.FunctionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionRequest::IsInitialized() const {
  return true;
}

void FunctionRequest::InternalSwap(FunctionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(linerequest_, other->linerequest_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FunctionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClassRequest::InitAsDefaultInstance() {
  ::testsgen::_ClassRequest_default_instance_._instance.get_mutable()->linerequest_ = const_cast< ::testsgen::LineRequest*>(
      ::testsgen::LineRequest::internal_default_instance());
}
class ClassRequest::_Internal {
 public:
  static const ::testsgen::LineRequest& linerequest(const ClassRequest* msg);
};

const ::testsgen::LineRequest&
ClassRequest::_Internal::linerequest(const ClassRequest* msg) {
  return *msg->linerequest_;
}
ClassRequest::ClassRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:testsgen.ClassRequest)
}
ClassRequest::ClassRequest(const ClassRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_linerequest()) {
    linerequest_ = new ::testsgen::LineRequest(*from.linerequest_);
  } else {
    linerequest_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:testsgen.ClassRequest)
}

void ClassRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClassRequest_testgen_2eproto.base);
  linerequest_ = nullptr;
}

ClassRequest::~ClassRequest() {
  // @@protoc_insertion_point(destructor:testsgen.ClassRequest)
  SharedDtor();
}

void ClassRequest::SharedDtor() {
  if (this != internal_default_instance()) delete linerequest_;
}

void ClassRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClassRequest& ClassRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClassRequest_testgen_2eproto.base);
  return *internal_default_instance();
}


void ClassRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:testsgen.ClassRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && linerequest_ != nullptr) {
    delete linerequest_;
  }
  linerequest_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ClassRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .testsgen.LineRequest lineRequest = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_linerequest(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClassRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testsgen.ClassRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .testsgen.LineRequest lineRequest = 1;
  if (this->has_linerequest()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::linerequest(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testsgen.ClassRequest)
  return target;
}

size_t ClassRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testsgen.ClassRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .testsgen.LineRequest lineRequest = 1;
  if (this->has_linerequest()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *linerequest_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClassRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:testsgen.ClassRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ClassRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClassRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:testsgen.ClassRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:testsgen.ClassRequest)
    MergeFrom(*source);
  }
}

void ClassRequest::MergeFrom(const ClassRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:testsgen.ClassRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_linerequest()) {
    _internal_mutable_linerequest()->::testsgen::LineRequest::MergeFrom(from._internal_linerequest());
  }
}

void ClassRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:testsgen.ClassRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClassRequest::CopyFrom(const ClassRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testsgen.ClassRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClassRequest::IsInitialized() const {
  return true;
}

void ClassRequest::InternalSwap(ClassRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(linerequest_, other->linerequest_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClassRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AssertionRequest::InitAsDefaultInstance() {
  ::testsgen::_AssertionRequest_default_instance_._instance.get_mutable()->linerequest_ = const_cast< ::testsgen::LineRequest*>(
      ::testsgen::LineRequest::internal_default_instance());
}
class AssertionRequest::_Internal {
 public:
  static const ::testsgen::LineRequest& linerequest(const AssertionRequest* msg);
};

const ::testsgen::LineRequest&
AssertionRequest::_Internal::linerequest(const AssertionRequest* msg) {
  return *msg->linerequest_;
}
AssertionRequest::AssertionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:testsgen.AssertionRequest)
}
AssertionRequest::AssertionRequest(const AssertionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_linerequest()) {
    linerequest_ = new ::testsgen::LineRequest(*from.linerequest_);
  } else {
    linerequest_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:testsgen.AssertionRequest)
}

void AssertionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AssertionRequest_testgen_2eproto.base);
  linerequest_ = nullptr;
}

AssertionRequest::~AssertionRequest() {
  // @@protoc_insertion_point(destructor:testsgen.AssertionRequest)
  SharedDtor();
}

void AssertionRequest::SharedDtor() {
  if (this != internal_default_instance()) delete linerequest_;
}

void AssertionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AssertionRequest& AssertionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AssertionRequest_testgen_2eproto.base);
  return *internal_default_instance();
}


void AssertionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:testsgen.AssertionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && linerequest_ != nullptr) {
    delete linerequest_;
  }
  linerequest_ = nullptr;
  _internal_metadata_.Clear();
}

const char* AssertionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .testsgen.LineRequest lineRequest = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_linerequest(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AssertionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testsgen.AssertionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .testsgen.LineRequest lineRequest = 1;
  if (this->has_linerequest()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::linerequest(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testsgen.AssertionRequest)
  return target;
}

size_t AssertionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testsgen.AssertionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .testsgen.LineRequest lineRequest = 1;
  if (this->has_linerequest()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *linerequest_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AssertionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:testsgen.AssertionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AssertionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AssertionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:testsgen.AssertionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:testsgen.AssertionRequest)
    MergeFrom(*source);
  }
}

void AssertionRequest::MergeFrom(const AssertionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:testsgen.AssertionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_linerequest()) {
    _internal_mutable_linerequest()->::testsgen::LineRequest::MergeFrom(from._internal_linerequest());
  }
}

void AssertionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:testsgen.AssertionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssertionRequest::CopyFrom(const AssertionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testsgen.AssertionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssertionRequest::IsInitialized() const {
  return true;
}

void AssertionRequest::InternalSwap(AssertionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(linerequest_, other->linerequest_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AssertionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PredicateRequest::InitAsDefaultInstance() {
  ::testsgen::_PredicateRequest_default_instance_._instance.get_mutable()->linerequest_ = const_cast< ::testsgen::LineRequest*>(
      ::testsgen::LineRequest::internal_default_instance());
  ::testsgen::_PredicateRequest_default_instance_._instance.get_mutable()->predicateinfo_ = const_cast< ::testsgen::PredicateInfo*>(
      ::testsgen::PredicateInfo::internal_default_instance());
}
class PredicateRequest::_Internal {
 public:
  static const ::testsgen::LineRequest& linerequest(const PredicateRequest* msg);
  static const ::testsgen::PredicateInfo& predicateinfo(const PredicateRequest* msg);
};

const ::testsgen::LineRequest&
PredicateRequest::_Internal::linerequest(const PredicateRequest* msg) {
  return *msg->linerequest_;
}
const ::testsgen::PredicateInfo&
PredicateRequest::_Internal::predicateinfo(const PredicateRequest* msg) {
  return *msg->predicateinfo_;
}
void PredicateRequest::clear_predicateinfo() {
  if (GetArenaNoVirtual() == nullptr && predicateinfo_ != nullptr) {
    delete predicateinfo_;
  }
  predicateinfo_ = nullptr;
}
PredicateRequest::PredicateRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:testsgen.PredicateRequest)
}
PredicateRequest::PredicateRequest(const PredicateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_linerequest()) {
    linerequest_ = new ::testsgen::LineRequest(*from.linerequest_);
  } else {
    linerequest_ = nullptr;
  }
  if (from._internal_has_predicateinfo()) {
    predicateinfo_ = new ::testsgen::PredicateInfo(*from.predicateinfo_);
  } else {
    predicateinfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:testsgen.PredicateRequest)
}

void PredicateRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PredicateRequest_testgen_2eproto.base);
  ::memset(&linerequest_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&predicateinfo_) -
      reinterpret_cast<char*>(&linerequest_)) + sizeof(predicateinfo_));
}

PredicateRequest::~PredicateRequest() {
  // @@protoc_insertion_point(destructor:testsgen.PredicateRequest)
  SharedDtor();
}

void PredicateRequest::SharedDtor() {
  if (this != internal_default_instance()) delete linerequest_;
  if (this != internal_default_instance()) delete predicateinfo_;
}

void PredicateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PredicateRequest& PredicateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PredicateRequest_testgen_2eproto.base);
  return *internal_default_instance();
}


void PredicateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:testsgen.PredicateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && linerequest_ != nullptr) {
    delete linerequest_;
  }
  linerequest_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && predicateinfo_ != nullptr) {
    delete predicateinfo_;
  }
  predicateinfo_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PredicateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .testsgen.LineRequest lineRequest = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_linerequest(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .testsgen.PredicateInfo predicateInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_predicateinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PredicateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testsgen.PredicateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .testsgen.LineRequest lineRequest = 1;
  if (this->has_linerequest()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::linerequest(this), target, stream);
  }

  // .testsgen.PredicateInfo predicateInfo = 2;
  if (this->has_predicateinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::predicateinfo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testsgen.PredicateRequest)
  return target;
}

size_t PredicateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testsgen.PredicateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .testsgen.LineRequest lineRequest = 1;
  if (this->has_linerequest()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *linerequest_);
  }

  // .testsgen.PredicateInfo predicateInfo = 2;
  if (this->has_predicateinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *predicateinfo_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PredicateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:testsgen.PredicateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PredicateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PredicateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:testsgen.PredicateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:testsgen.PredicateRequest)
    MergeFrom(*source);
  }
}

void PredicateRequest::MergeFrom(const PredicateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:testsgen.PredicateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_linerequest()) {
    _internal_mutable_linerequest()->::testsgen::LineRequest::MergeFrom(from._internal_linerequest());
  }
  if (from.has_predicateinfo()) {
    _internal_mutable_predicateinfo()->::testsgen::PredicateInfo::MergeFrom(from._internal_predicateinfo());
  }
}

void PredicateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:testsgen.PredicateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PredicateRequest::CopyFrom(const PredicateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testsgen.PredicateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PredicateRequest::IsInitialized() const {
  return true;
}

void PredicateRequest::InternalSwap(PredicateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(linerequest_, other->linerequest_);
  swap(predicateinfo_, other->predicateinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PredicateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StubsResponse::InitAsDefaultInstance() {
  ::testsgen::_StubsResponse_default_instance_._instance.get_mutable()->progress_ = const_cast< ::testsgen::Progress*>(
      ::testsgen::Progress::internal_default_instance());
}
class StubsResponse::_Internal {
 public:
  static const ::testsgen::Progress& progress(const StubsResponse* msg);
};

const ::testsgen::Progress&
StubsResponse::_Internal::progress(const StubsResponse* msg) {
  return *msg->progress_;
}
void StubsResponse::clear_stubsources() {
  stubsources_.Clear();
}
void StubsResponse::clear_progress() {
  if (GetArenaNoVirtual() == nullptr && progress_ != nullptr) {
    delete progress_;
  }
  progress_ = nullptr;
}
StubsResponse::StubsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:testsgen.StubsResponse)
}
StubsResponse::StubsResponse(const StubsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      stubsources_(from.stubsources_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_progress()) {
    progress_ = new ::testsgen::Progress(*from.progress_);
  } else {
    progress_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:testsgen.StubsResponse)
}

void StubsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StubsResponse_testgen_2eproto.base);
  progress_ = nullptr;
}

StubsResponse::~StubsResponse() {
  // @@protoc_insertion_point(destructor:testsgen.StubsResponse)
  SharedDtor();
}

void StubsResponse::SharedDtor() {
  if (this != internal_default_instance()) delete progress_;
}

void StubsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StubsResponse& StubsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StubsResponse_testgen_2eproto.base);
  return *internal_default_instance();
}


void StubsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:testsgen.StubsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stubsources_.Clear();
  if (GetArenaNoVirtual() == nullptr && progress_ != nullptr) {
    delete progress_;
  }
  progress_ = nullptr;
  _internal_metadata_.Clear();
}

const char* StubsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .testsgen.SourceCode stubSources = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stubsources(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .testsgen.Progress progress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_progress(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StubsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testsgen.StubsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .testsgen.SourceCode stubSources = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stubsources_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_stubsources(i), target, stream);
  }

  // .testsgen.Progress progress = 2;
  if (this->has_progress()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::progress(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testsgen.StubsResponse)
  return target;
}

size_t StubsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testsgen.StubsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .testsgen.SourceCode stubSources = 1;
  total_size += 1UL * this->_internal_stubsources_size();
  for (const auto& msg : this->stubsources_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .testsgen.Progress progress = 2;
  if (this->has_progress()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *progress_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StubsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:testsgen.StubsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StubsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StubsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:testsgen.StubsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:testsgen.StubsResponse)
    MergeFrom(*source);
  }
}

void StubsResponse::MergeFrom(const StubsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:testsgen.StubsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stubsources_.MergeFrom(from.stubsources_);
  if (from.has_progress()) {
    _internal_mutable_progress()->::testsgen::Progress::MergeFrom(from._internal_progress());
  }
}

void StubsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:testsgen.StubsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StubsResponse::CopyFrom(const StubsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testsgen.StubsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StubsResponse::IsInitialized() const {
  return true;
}

void StubsResponse::InternalSwap(StubsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  stubsources_.InternalSwap(&other->stubsources_);
  swap(progress_, other->progress_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StubsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestsResponse::InitAsDefaultInstance() {
  ::testsgen::_TestsResponse_default_instance_._instance.get_mutable()->stubs_ = const_cast< ::testsgen::StubsResponse*>(
      ::testsgen::StubsResponse::internal_default_instance());
  ::testsgen::_TestsResponse_default_instance_._instance.get_mutable()->progress_ = const_cast< ::testsgen::Progress*>(
      ::testsgen::Progress::internal_default_instance());
}
class TestsResponse::_Internal {
 public:
  static const ::testsgen::StubsResponse& stubs(const TestsResponse* msg);
  static const ::testsgen::Progress& progress(const TestsResponse* msg);
};

const ::testsgen::StubsResponse&
TestsResponse::_Internal::stubs(const TestsResponse* msg) {
  return *msg->stubs_;
}
const ::testsgen::Progress&
TestsResponse::_Internal::progress(const TestsResponse* msg) {
  return *msg->progress_;
}
void TestsResponse::clear_testsources() {
  testsources_.Clear();
}
void TestsResponse::clear_progress() {
  if (GetArenaNoVirtual() == nullptr && progress_ != nullptr) {
    delete progress_;
  }
  progress_ = nullptr;
}
TestsResponse::TestsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:testsgen.TestsResponse)
}
TestsResponse::TestsResponse(const TestsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      testsources_(from.testsources_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_stubs()) {
    stubs_ = new ::testsgen::StubsResponse(*from.stubs_);
  } else {
    stubs_ = nullptr;
  }
  if (from._internal_has_progress()) {
    progress_ = new ::testsgen::Progress(*from.progress_);
  } else {
    progress_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:testsgen.TestsResponse)
}

void TestsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestsResponse_testgen_2eproto.base);
  ::memset(&stubs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&progress_) -
      reinterpret_cast<char*>(&stubs_)) + sizeof(progress_));
}

TestsResponse::~TestsResponse() {
  // @@protoc_insertion_point(destructor:testsgen.TestsResponse)
  SharedDtor();
}

void TestsResponse::SharedDtor() {
  if (this != internal_default_instance()) delete stubs_;
  if (this != internal_default_instance()) delete progress_;
}

void TestsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestsResponse& TestsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestsResponse_testgen_2eproto.base);
  return *internal_default_instance();
}


void TestsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:testsgen.TestsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  testsources_.Clear();
  if (GetArenaNoVirtual() == nullptr && stubs_ != nullptr) {
    delete stubs_;
  }
  stubs_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && progress_ != nullptr) {
    delete progress_;
  }
  progress_ = nullptr;
  _internal_metadata_.Clear();
}

const char* TestsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .testsgen.SourceCode testSources = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_testsources(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .testsgen.StubsResponse stubs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stubs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .testsgen.Progress progress = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_progress(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testsgen.TestsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .testsgen.SourceCode testSources = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_testsources_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_testsources(i), target, stream);
  }

  // .testsgen.StubsResponse stubs = 2;
  if (this->has_stubs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stubs(this), target, stream);
  }

  // .testsgen.Progress progress = 3;
  if (this->has_progress()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::progress(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testsgen.TestsResponse)
  return target;
}

size_t TestsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testsgen.TestsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .testsgen.SourceCode testSources = 1;
  total_size += 1UL * this->_internal_testsources_size();
  for (const auto& msg : this->testsources_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .testsgen.StubsResponse stubs = 2;
  if (this->has_stubs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stubs_);
  }

  // .testsgen.Progress progress = 3;
  if (this->has_progress()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *progress_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:testsgen.TestsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TestsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:testsgen.TestsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:testsgen.TestsResponse)
    MergeFrom(*source);
  }
}

void TestsResponse::MergeFrom(const TestsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:testsgen.TestsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  testsources_.MergeFrom(from.testsources_);
  if (from.has_stubs()) {
    _internal_mutable_stubs()->::testsgen::StubsResponse::MergeFrom(from._internal_stubs());
  }
  if (from.has_progress()) {
    _internal_mutable_progress()->::testsgen::Progress::MergeFrom(from._internal_progress());
  }
}

void TestsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:testsgen.TestsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestsResponse::CopyFrom(const TestsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testsgen.TestsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestsResponse::IsInitialized() const {
  return true;
}

void TestsResponse::InternalSwap(TestsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  testsources_.InternalSwap(&other->testsources_);
  swap(stubs_, other->stubs_);
  swap(progress_, other->progress_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SourceLine::InitAsDefaultInstance() {
}
class SourceLine::_Internal {
 public:
};

SourceLine::SourceLine()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:testsgen.SourceLine)
}
SourceLine::SourceLine(const SourceLine& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  line_ = from.line_;
  // @@protoc_insertion_point(copy_constructor:testsgen.SourceLine)
}

void SourceLine::SharedCtor() {
  line_ = 0u;
}

SourceLine::~SourceLine() {
  // @@protoc_insertion_point(destructor:testsgen.SourceLine)
  SharedDtor();
}

void SourceLine::SharedDtor() {
}

void SourceLine::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SourceLine& SourceLine::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SourceLine_testgen_2eproto.base);
  return *internal_default_instance();
}


void SourceLine::Clear() {
// @@protoc_insertion_point(message_clear_start:testsgen.SourceLine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  line_ = 0u;
  _internal_metadata_.Clear();
}

const char* SourceLine::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 line = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          line_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SourceLine::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testsgen.SourceLine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 line = 1;
  if (this->line() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_line(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testsgen.SourceLine)
  return target;
}

size_t SourceLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testsgen.SourceLine)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 line = 1;
  if (this->line() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_line());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SourceLine::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:testsgen.SourceLine)
  GOOGLE_DCHECK_NE(&from, this);
  const SourceLine* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SourceLine>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:testsgen.SourceLine)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:testsgen.SourceLine)
    MergeFrom(*source);
  }
}

void SourceLine::MergeFrom(const SourceLine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:testsgen.SourceLine)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.line() != 0) {
    _internal_set_line(from._internal_line());
  }
}

void SourceLine::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:testsgen.SourceLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SourceLine::CopyFrom(const SourceLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testsgen.SourceLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SourceLine::IsInitialized() const {
  return true;
}

void SourceLine::InternalSwap(SourceLine* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(line_, other->line_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SourceLine::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FileCoverageSimplified::InitAsDefaultInstance() {
}
class FileCoverageSimplified::_Internal {
 public:
};

FileCoverageSimplified::FileCoverageSimplified()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:testsgen.FileCoverageSimplified)
}
FileCoverageSimplified::FileCoverageSimplified(const FileCoverageSimplified& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      fullcoveragelines_(from.fullcoveragelines_),
      partialcoveragelines_(from.partialcoveragelines_),
      nocoveragelines_(from.nocoveragelines_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filepath().empty()) {
    filepath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filepath_);
  }
  // @@protoc_insertion_point(copy_constructor:testsgen.FileCoverageSimplified)
}

void FileCoverageSimplified::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FileCoverageSimplified_testgen_2eproto.base);
  filepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FileCoverageSimplified::~FileCoverageSimplified() {
  // @@protoc_insertion_point(destructor:testsgen.FileCoverageSimplified)
  SharedDtor();
}

void FileCoverageSimplified::SharedDtor() {
  filepath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FileCoverageSimplified::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FileCoverageSimplified& FileCoverageSimplified::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FileCoverageSimplified_testgen_2eproto.base);
  return *internal_default_instance();
}


void FileCoverageSimplified::Clear() {
// @@protoc_insertion_point(message_clear_start:testsgen.FileCoverageSimplified)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fullcoveragelines_.Clear();
  partialcoveragelines_.Clear();
  nocoveragelines_.Clear();
  filepath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* FileCoverageSimplified::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string filePath = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_filepath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "testsgen.FileCoverageSimplified.filePath"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .testsgen.SourceLine fullCoverageLines = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fullcoveragelines(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .testsgen.SourceLine partialCoverageLines = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_partialcoveragelines(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .testsgen.SourceLine noCoverageLines = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nocoveragelines(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FileCoverageSimplified::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testsgen.FileCoverageSimplified)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string filePath = 1;
  if (this->filepath().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filepath().data(), static_cast<int>(this->_internal_filepath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testsgen.FileCoverageSimplified.filePath");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filepath(), target);
  }

  // repeated .testsgen.SourceLine fullCoverageLines = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fullcoveragelines_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_fullcoveragelines(i), target, stream);
  }

  // repeated .testsgen.SourceLine partialCoverageLines = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_partialcoveragelines_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_partialcoveragelines(i), target, stream);
  }

  // repeated .testsgen.SourceLine noCoverageLines = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_nocoveragelines_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_nocoveragelines(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testsgen.FileCoverageSimplified)
  return target;
}

size_t FileCoverageSimplified::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testsgen.FileCoverageSimplified)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .testsgen.SourceLine fullCoverageLines = 2;
  total_size += 1UL * this->_internal_fullcoveragelines_size();
  for (const auto& msg : this->fullcoveragelines_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .testsgen.SourceLine partialCoverageLines = 3;
  total_size += 1UL * this->_internal_partialcoveragelines_size();
  for (const auto& msg : this->partialcoveragelines_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .testsgen.SourceLine noCoverageLines = 4;
  total_size += 1UL * this->_internal_nocoveragelines_size();
  for (const auto& msg : this->nocoveragelines_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string filePath = 1;
  if (this->filepath().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filepath());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileCoverageSimplified::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:testsgen.FileCoverageSimplified)
  GOOGLE_DCHECK_NE(&from, this);
  const FileCoverageSimplified* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FileCoverageSimplified>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:testsgen.FileCoverageSimplified)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:testsgen.FileCoverageSimplified)
    MergeFrom(*source);
  }
}

void FileCoverageSimplified::MergeFrom(const FileCoverageSimplified& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:testsgen.FileCoverageSimplified)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fullcoveragelines_.MergeFrom(from.fullcoveragelines_);
  partialcoveragelines_.MergeFrom(from.partialcoveragelines_);
  nocoveragelines_.MergeFrom(from.nocoveragelines_);
  if (from.filepath().size() > 0) {

    filepath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filepath_);
  }
}

void FileCoverageSimplified::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:testsgen.FileCoverageSimplified)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileCoverageSimplified::CopyFrom(const FileCoverageSimplified& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testsgen.FileCoverageSimplified)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileCoverageSimplified::IsInitialized() const {
  return true;
}

void FileCoverageSimplified::InternalSwap(FileCoverageSimplified* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  fullcoveragelines_.InternalSwap(&other->fullcoveragelines_);
  partialcoveragelines_.InternalSwap(&other->partialcoveragelines_);
  nocoveragelines_.InternalSwap(&other->nocoveragelines_);
  filepath_.Swap(&other->filepath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata FileCoverageSimplified::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestFilter::InitAsDefaultInstance() {
}
class TestFilter::_Internal {
 public:
};

TestFilter::TestFilter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:testsgen.TestFilter)
}
TestFilter::TestFilter(const TestFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  testfilepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_testfilepath().empty()) {
    testfilepath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.testfilepath_);
  }
  testname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_testname().empty()) {
    testname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.testname_);
  }
  testsuite_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_testsuite().empty()) {
    testsuite_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.testsuite_);
  }
  // @@protoc_insertion_point(copy_constructor:testsgen.TestFilter)
}

void TestFilter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestFilter_testgen_2eproto.base);
  testfilepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  testname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  testsuite_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TestFilter::~TestFilter() {
  // @@protoc_insertion_point(destructor:testsgen.TestFilter)
  SharedDtor();
}

void TestFilter::SharedDtor() {
  testfilepath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  testname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  testsuite_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TestFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestFilter& TestFilter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestFilter_testgen_2eproto.base);
  return *internal_default_instance();
}


void TestFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:testsgen.TestFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  testfilepath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  testname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  testsuite_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* TestFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string testFilePath = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_testfilepath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "testsgen.TestFilter.testFilePath"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string testName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_testname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "testsgen.TestFilter.testName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string testSuite = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_testsuite();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "testsgen.TestFilter.testSuite"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestFilter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testsgen.TestFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string testFilePath = 1;
  if (this->testfilepath().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_testfilepath().data(), static_cast<int>(this->_internal_testfilepath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testsgen.TestFilter.testFilePath");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_testfilepath(), target);
  }

  // string testName = 2;
  if (this->testname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_testname().data(), static_cast<int>(this->_internal_testname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testsgen.TestFilter.testName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_testname(), target);
  }

  // string testSuite = 3;
  if (this->testsuite().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_testsuite().data(), static_cast<int>(this->_internal_testsuite().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testsgen.TestFilter.testSuite");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_testsuite(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testsgen.TestFilter)
  return target;
}

size_t TestFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testsgen.TestFilter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string testFilePath = 1;
  if (this->testfilepath().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_testfilepath());
  }

  // string testName = 2;
  if (this->testname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_testname());
  }

  // string testSuite = 3;
  if (this->testsuite().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_testsuite());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestFilter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:testsgen.TestFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const TestFilter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestFilter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:testsgen.TestFilter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:testsgen.TestFilter)
    MergeFrom(*source);
  }
}

void TestFilter::MergeFrom(const TestFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:testsgen.TestFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.testfilepath().size() > 0) {

    testfilepath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.testfilepath_);
  }
  if (from.testname().size() > 0) {

    testname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.testname_);
  }
  if (from.testsuite().size() > 0) {

    testsuite_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.testsuite_);
  }
}

void TestFilter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:testsgen.TestFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestFilter::CopyFrom(const TestFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testsgen.TestFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestFilter::IsInitialized() const {
  return true;
}

void TestFilter::InternalSwap(TestFilter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  testfilepath_.Swap(&other->testfilepath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  testname_.Swap(&other->testname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  testsuite_.Swap(&other->testsuite_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata TestFilter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CoverageAndResultsRequest::InitAsDefaultInstance() {
  ::testsgen::_CoverageAndResultsRequest_default_instance_._instance.get_mutable()->projectcontext_ = const_cast< ::testsgen::ProjectContext*>(
      ::testsgen::ProjectContext::internal_default_instance());
  ::testsgen::_CoverageAndResultsRequest_default_instance_._instance.get_mutable()->settingscontext_ = const_cast< ::testsgen::SettingsContext*>(
      ::testsgen::SettingsContext::internal_default_instance());
  ::testsgen::_CoverageAndResultsRequest_default_instance_._instance.get_mutable()->testfilter_ = const_cast< ::testsgen::TestFilter*>(
      ::testsgen::TestFilter::internal_default_instance());
}
class CoverageAndResultsRequest::_Internal {
 public:
  static const ::testsgen::ProjectContext& projectcontext(const CoverageAndResultsRequest* msg);
  static const ::testsgen::SettingsContext& settingscontext(const CoverageAndResultsRequest* msg);
  static const ::testsgen::TestFilter& testfilter(const CoverageAndResultsRequest* msg);
};

const ::testsgen::ProjectContext&
CoverageAndResultsRequest::_Internal::projectcontext(const CoverageAndResultsRequest* msg) {
  return *msg->projectcontext_;
}
const ::testsgen::SettingsContext&
CoverageAndResultsRequest::_Internal::settingscontext(const CoverageAndResultsRequest* msg) {
  return *msg->settingscontext_;
}
const ::testsgen::TestFilter&
CoverageAndResultsRequest::_Internal::testfilter(const CoverageAndResultsRequest* msg) {
  return *msg->testfilter_;
}
CoverageAndResultsRequest::CoverageAndResultsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:testsgen.CoverageAndResultsRequest)
}
CoverageAndResultsRequest::CoverageAndResultsRequest(const CoverageAndResultsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_projectcontext()) {
    projectcontext_ = new ::testsgen::ProjectContext(*from.projectcontext_);
  } else {
    projectcontext_ = nullptr;
  }
  if (from._internal_has_settingscontext()) {
    settingscontext_ = new ::testsgen::SettingsContext(*from.settingscontext_);
  } else {
    settingscontext_ = nullptr;
  }
  if (from._internal_has_testfilter()) {
    testfilter_ = new ::testsgen::TestFilter(*from.testfilter_);
  } else {
    testfilter_ = nullptr;
  }
  coverage_ = from.coverage_;
  // @@protoc_insertion_point(copy_constructor:testsgen.CoverageAndResultsRequest)
}

void CoverageAndResultsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CoverageAndResultsRequest_testgen_2eproto.base);
  ::memset(&projectcontext_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&coverage_) -
      reinterpret_cast<char*>(&projectcontext_)) + sizeof(coverage_));
}

CoverageAndResultsRequest::~CoverageAndResultsRequest() {
  // @@protoc_insertion_point(destructor:testsgen.CoverageAndResultsRequest)
  SharedDtor();
}

void CoverageAndResultsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete projectcontext_;
  if (this != internal_default_instance()) delete settingscontext_;
  if (this != internal_default_instance()) delete testfilter_;
}

void CoverageAndResultsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CoverageAndResultsRequest& CoverageAndResultsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CoverageAndResultsRequest_testgen_2eproto.base);
  return *internal_default_instance();
}


void CoverageAndResultsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:testsgen.CoverageAndResultsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && projectcontext_ != nullptr) {
    delete projectcontext_;
  }
  projectcontext_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && settingscontext_ != nullptr) {
    delete settingscontext_;
  }
  settingscontext_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && testfilter_ != nullptr) {
    delete testfilter_;
  }
  testfilter_ = nullptr;
  coverage_ = false;
  _internal_metadata_.Clear();
}

const char* CoverageAndResultsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .testsgen.ProjectContext projectContext = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_projectcontext(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .testsgen.SettingsContext settingsContext = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_settingscontext(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .testsgen.TestFilter testFilter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_testfilter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool coverage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          coverage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CoverageAndResultsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testsgen.CoverageAndResultsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .testsgen.ProjectContext projectContext = 1;
  if (this->has_projectcontext()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::projectcontext(this), target, stream);
  }

  // .testsgen.SettingsContext settingsContext = 2;
  if (this->has_settingscontext()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::settingscontext(this), target, stream);
  }

  // .testsgen.TestFilter testFilter = 3;
  if (this->has_testfilter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::testfilter(this), target, stream);
  }

  // bool coverage = 4;
  if (this->coverage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_coverage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testsgen.CoverageAndResultsRequest)
  return target;
}

size_t CoverageAndResultsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testsgen.CoverageAndResultsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .testsgen.ProjectContext projectContext = 1;
  if (this->has_projectcontext()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *projectcontext_);
  }

  // .testsgen.SettingsContext settingsContext = 2;
  if (this->has_settingscontext()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *settingscontext_);
  }

  // .testsgen.TestFilter testFilter = 3;
  if (this->has_testfilter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *testfilter_);
  }

  // bool coverage = 4;
  if (this->coverage() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CoverageAndResultsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:testsgen.CoverageAndResultsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CoverageAndResultsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CoverageAndResultsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:testsgen.CoverageAndResultsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:testsgen.CoverageAndResultsRequest)
    MergeFrom(*source);
  }
}

void CoverageAndResultsRequest::MergeFrom(const CoverageAndResultsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:testsgen.CoverageAndResultsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_projectcontext()) {
    _internal_mutable_projectcontext()->::testsgen::ProjectContext::MergeFrom(from._internal_projectcontext());
  }
  if (from.has_settingscontext()) {
    _internal_mutable_settingscontext()->::testsgen::SettingsContext::MergeFrom(from._internal_settingscontext());
  }
  if (from.has_testfilter()) {
    _internal_mutable_testfilter()->::testsgen::TestFilter::MergeFrom(from._internal_testfilter());
  }
  if (from.coverage() != 0) {
    _internal_set_coverage(from._internal_coverage());
  }
}

void CoverageAndResultsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:testsgen.CoverageAndResultsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CoverageAndResultsRequest::CopyFrom(const CoverageAndResultsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testsgen.CoverageAndResultsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoverageAndResultsRequest::IsInitialized() const {
  return true;
}

void CoverageAndResultsRequest::InternalSwap(CoverageAndResultsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(projectcontext_, other->projectcontext_);
  swap(settingscontext_, other->settingscontext_);
  swap(testfilter_, other->testfilter_);
  swap(coverage_, other->coverage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CoverageAndResultsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestResultObject::InitAsDefaultInstance() {
}
class TestResultObject::_Internal {
 public:
};

TestResultObject::TestResultObject()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:testsgen.TestResultObject)
}
TestResultObject::TestResultObject(const TestResultObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  testfilepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_testfilepath().empty()) {
    testfilepath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.testfilepath_);
  }
  testname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_testname().empty()) {
    testname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.testname_);
  }
  output_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_output().empty()) {
    output_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.output_);
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:testsgen.TestResultObject)
}

void TestResultObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestResultObject_testgen_2eproto.base);
  testfilepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  testname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  output_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
}

TestResultObject::~TestResultObject() {
  // @@protoc_insertion_point(destructor:testsgen.TestResultObject)
  SharedDtor();
}

void TestResultObject::SharedDtor() {
  testfilepath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  testname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  output_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TestResultObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestResultObject& TestResultObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestResultObject_testgen_2eproto.base);
  return *internal_default_instance();
}


void TestResultObject::Clear() {
// @@protoc_insertion_point(message_clear_start:testsgen.TestResultObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  testfilepath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  testname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  output_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
  _internal_metadata_.Clear();
}

const char* TestResultObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string testFilePath = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_testfilepath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "testsgen.TestResultObject.testFilePath"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string testname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_testname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "testsgen.TestResultObject.testname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .testsgen.TestStatus status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::testsgen::TestStatus>(val));
        } else goto handle_unusual;
        continue;
      // string output = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_output();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "testsgen.TestResultObject.output"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestResultObject::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testsgen.TestResultObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string testFilePath = 1;
  if (this->testfilepath().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_testfilepath().data(), static_cast<int>(this->_internal_testfilepath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testsgen.TestResultObject.testFilePath");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_testfilepath(), target);
  }

  // string testname = 2;
  if (this->testname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_testname().data(), static_cast<int>(this->_internal_testname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testsgen.TestResultObject.testname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_testname(), target);
  }

  // .testsgen.TestStatus status = 3;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_status(), target);
  }

  // string output = 4;
  if (this->output().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_output().data(), static_cast<int>(this->_internal_output().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testsgen.TestResultObject.output");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_output(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testsgen.TestResultObject)
  return target;
}

size_t TestResultObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testsgen.TestResultObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string testFilePath = 1;
  if (this->testfilepath().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_testfilepath());
  }

  // string testname = 2;
  if (this->testname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_testname());
  }

  // string output = 4;
  if (this->output().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_output());
  }

  // .testsgen.TestStatus status = 3;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestResultObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:testsgen.TestResultObject)
  GOOGLE_DCHECK_NE(&from, this);
  const TestResultObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestResultObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:testsgen.TestResultObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:testsgen.TestResultObject)
    MergeFrom(*source);
  }
}

void TestResultObject::MergeFrom(const TestResultObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:testsgen.TestResultObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.testfilepath().size() > 0) {

    testfilepath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.testfilepath_);
  }
  if (from.testname().size() > 0) {

    testname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.testname_);
  }
  if (from.output().size() > 0) {

    output_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.output_);
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void TestResultObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:testsgen.TestResultObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestResultObject::CopyFrom(const TestResultObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testsgen.TestResultObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestResultObject::IsInitialized() const {
  return true;
}

void TestResultObject::InternalSwap(TestResultObject* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  testfilepath_.Swap(&other->testfilepath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  testname_.Swap(&other->testname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  output_.Swap(&other->output_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestResultObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CoverageAndResultsResponse::InitAsDefaultInstance() {
  ::testsgen::_CoverageAndResultsResponse_default_instance_._instance.get_mutable()->progress_ = const_cast< ::testsgen::Progress*>(
      ::testsgen::Progress::internal_default_instance());
}
class CoverageAndResultsResponse::_Internal {
 public:
  static const ::testsgen::Progress& progress(const CoverageAndResultsResponse* msg);
};

const ::testsgen::Progress&
CoverageAndResultsResponse::_Internal::progress(const CoverageAndResultsResponse* msg) {
  return *msg->progress_;
}
void CoverageAndResultsResponse::clear_progress() {
  if (GetArenaNoVirtual() == nullptr && progress_ != nullptr) {
    delete progress_;
  }
  progress_ = nullptr;
}
CoverageAndResultsResponse::CoverageAndResultsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:testsgen.CoverageAndResultsResponse)
}
CoverageAndResultsResponse::CoverageAndResultsResponse(const CoverageAndResultsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      testrunresults_(from.testrunresults_),
      coverages_(from.coverages_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errormessage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_errormessage().empty()) {
    errormessage_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.errormessage_);
  }
  if (from._internal_has_progress()) {
    progress_ = new ::testsgen::Progress(*from.progress_);
  } else {
    progress_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:testsgen.CoverageAndResultsResponse)
}

void CoverageAndResultsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CoverageAndResultsResponse_testgen_2eproto.base);
  errormessage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  progress_ = nullptr;
}

CoverageAndResultsResponse::~CoverageAndResultsResponse() {
  // @@protoc_insertion_point(destructor:testsgen.CoverageAndResultsResponse)
  SharedDtor();
}

void CoverageAndResultsResponse::SharedDtor() {
  errormessage_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete progress_;
}

void CoverageAndResultsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CoverageAndResultsResponse& CoverageAndResultsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CoverageAndResultsResponse_testgen_2eproto.base);
  return *internal_default_instance();
}


void CoverageAndResultsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:testsgen.CoverageAndResultsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  testrunresults_.Clear();
  coverages_.Clear();
  errormessage_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && progress_ != nullptr) {
    delete progress_;
  }
  progress_ = nullptr;
  _internal_metadata_.Clear();
}

const char* CoverageAndResultsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .testsgen.TestResultObject testRunResults = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_testrunresults(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .testsgen.FileCoverageSimplified coverages = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_coverages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .testsgen.Progress progress = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_progress(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string errorMessage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_errormessage();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "testsgen.CoverageAndResultsResponse.errorMessage"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CoverageAndResultsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testsgen.CoverageAndResultsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .testsgen.TestResultObject testRunResults = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_testrunresults_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_testrunresults(i), target, stream);
  }

  // repeated .testsgen.FileCoverageSimplified coverages = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_coverages_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_coverages(i), target, stream);
  }

  // .testsgen.Progress progress = 3;
  if (this->has_progress()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::progress(this), target, stream);
  }

  // string errorMessage = 4;
  if (this->errormessage().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errormessage().data(), static_cast<int>(this->_internal_errormessage().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testsgen.CoverageAndResultsResponse.errorMessage");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_errormessage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testsgen.CoverageAndResultsResponse)
  return target;
}

size_t CoverageAndResultsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testsgen.CoverageAndResultsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .testsgen.TestResultObject testRunResults = 1;
  total_size += 1UL * this->_internal_testrunresults_size();
  for (const auto& msg : this->testrunresults_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .testsgen.FileCoverageSimplified coverages = 2;
  total_size += 1UL * this->_internal_coverages_size();
  for (const auto& msg : this->coverages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string errorMessage = 4;
  if (this->errormessage().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errormessage());
  }

  // .testsgen.Progress progress = 3;
  if (this->has_progress()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *progress_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CoverageAndResultsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:testsgen.CoverageAndResultsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CoverageAndResultsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CoverageAndResultsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:testsgen.CoverageAndResultsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:testsgen.CoverageAndResultsResponse)
    MergeFrom(*source);
  }
}

void CoverageAndResultsResponse::MergeFrom(const CoverageAndResultsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:testsgen.CoverageAndResultsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  testrunresults_.MergeFrom(from.testrunresults_);
  coverages_.MergeFrom(from.coverages_);
  if (from.errormessage().size() > 0) {

    errormessage_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.errormessage_);
  }
  if (from.has_progress()) {
    _internal_mutable_progress()->::testsgen::Progress::MergeFrom(from._internal_progress());
  }
}

void CoverageAndResultsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:testsgen.CoverageAndResultsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CoverageAndResultsResponse::CopyFrom(const CoverageAndResultsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testsgen.CoverageAndResultsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoverageAndResultsResponse::IsInitialized() const {
  return true;
}

void CoverageAndResultsResponse::InternalSwap(CoverageAndResultsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  testrunresults_.InternalSwap(&other->testrunresults_);
  coverages_.InternalSwap(&other->coverages_);
  errormessage_.Swap(&other->errormessage_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(progress_, other->progress_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CoverageAndResultsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HeartbeatResponse::InitAsDefaultInstance() {
}
class HeartbeatResponse::_Internal {
 public:
};

HeartbeatResponse::HeartbeatResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:testsgen.HeartbeatResponse)
}
HeartbeatResponse::HeartbeatResponse(const HeartbeatResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  linked_ = from.linked_;
  // @@protoc_insertion_point(copy_constructor:testsgen.HeartbeatResponse)
}

void HeartbeatResponse::SharedCtor() {
  linked_ = false;
}

HeartbeatResponse::~HeartbeatResponse() {
  // @@protoc_insertion_point(destructor:testsgen.HeartbeatResponse)
  SharedDtor();
}

void HeartbeatResponse::SharedDtor() {
}

void HeartbeatResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HeartbeatResponse& HeartbeatResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HeartbeatResponse_testgen_2eproto.base);
  return *internal_default_instance();
}


void HeartbeatResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:testsgen.HeartbeatResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  linked_ = false;
  _internal_metadata_.Clear();
}

const char* HeartbeatResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool linked = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          linked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HeartbeatResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testsgen.HeartbeatResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool linked = 1;
  if (this->linked() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_linked(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testsgen.HeartbeatResponse)
  return target;
}

size_t HeartbeatResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testsgen.HeartbeatResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool linked = 1;
  if (this->linked() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeartbeatResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:testsgen.HeartbeatResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const HeartbeatResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HeartbeatResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:testsgen.HeartbeatResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:testsgen.HeartbeatResponse)
    MergeFrom(*source);
  }
}

void HeartbeatResponse::MergeFrom(const HeartbeatResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:testsgen.HeartbeatResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.linked() != 0) {
    _internal_set_linked(from._internal_linked());
  }
}

void HeartbeatResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:testsgen.HeartbeatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartbeatResponse::CopyFrom(const HeartbeatResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testsgen.HeartbeatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartbeatResponse::IsInitialized() const {
  return true;
}

void HeartbeatResponse::InternalSwap(HeartbeatResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(linked_, other->linked_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HeartbeatResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProjectConfigRequest::InitAsDefaultInstance() {
  ::testsgen::_ProjectConfigRequest_default_instance_._instance.get_mutable()->projectcontext_ = const_cast< ::testsgen::ProjectContext*>(
      ::testsgen::ProjectContext::internal_default_instance());
}
class ProjectConfigRequest::_Internal {
 public:
  static const ::testsgen::ProjectContext& projectcontext(const ProjectConfigRequest* msg);
};

const ::testsgen::ProjectContext&
ProjectConfigRequest::_Internal::projectcontext(const ProjectConfigRequest* msg) {
  return *msg->projectcontext_;
}
ProjectConfigRequest::ProjectConfigRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:testsgen.ProjectConfigRequest)
}
ProjectConfigRequest::ProjectConfigRequest(const ProjectConfigRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      cmakeoptions_(from.cmakeoptions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_projectcontext()) {
    projectcontext_ = new ::testsgen::ProjectContext(*from.projectcontext_);
  } else {
    projectcontext_ = nullptr;
  }
  configmode_ = from.configmode_;
  // @@protoc_insertion_point(copy_constructor:testsgen.ProjectConfigRequest)
}

void ProjectConfigRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProjectConfigRequest_testgen_2eproto.base);
  ::memset(&projectcontext_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&configmode_) -
      reinterpret_cast<char*>(&projectcontext_)) + sizeof(configmode_));
}

ProjectConfigRequest::~ProjectConfigRequest() {
  // @@protoc_insertion_point(destructor:testsgen.ProjectConfigRequest)
  SharedDtor();
}

void ProjectConfigRequest::SharedDtor() {
  if (this != internal_default_instance()) delete projectcontext_;
}

void ProjectConfigRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProjectConfigRequest& ProjectConfigRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProjectConfigRequest_testgen_2eproto.base);
  return *internal_default_instance();
}


void ProjectConfigRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:testsgen.ProjectConfigRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cmakeoptions_.Clear();
  if (GetArenaNoVirtual() == nullptr && projectcontext_ != nullptr) {
    delete projectcontext_;
  }
  projectcontext_ = nullptr;
  configmode_ = 0;
  _internal_metadata_.Clear();
}

const char* ProjectConfigRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .testsgen.ProjectContext projectContext = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_projectcontext(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .testsgen.ConfigMode configMode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_configmode(static_cast<::testsgen::ConfigMode>(val));
        } else goto handle_unusual;
        continue;
      // repeated string cmakeOptions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_cmakeoptions();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "testsgen.ProjectConfigRequest.cmakeOptions"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProjectConfigRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testsgen.ProjectConfigRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .testsgen.ProjectContext projectContext = 1;
  if (this->has_projectcontext()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::projectcontext(this), target, stream);
  }

  // .testsgen.ConfigMode configMode = 2;
  if (this->configmode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_configmode(), target);
  }

  // repeated string cmakeOptions = 3;
  for (int i = 0, n = this->_internal_cmakeoptions_size(); i < n; i++) {
    const auto& s = this->_internal_cmakeoptions(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testsgen.ProjectConfigRequest.cmakeOptions");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testsgen.ProjectConfigRequest)
  return target;
}

size_t ProjectConfigRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testsgen.ProjectConfigRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string cmakeOptions = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(cmakeoptions_.size());
  for (int i = 0, n = cmakeoptions_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      cmakeoptions_.Get(i));
  }

  // .testsgen.ProjectContext projectContext = 1;
  if (this->has_projectcontext()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *projectcontext_);
  }

  // .testsgen.ConfigMode configMode = 2;
  if (this->configmode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_configmode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProjectConfigRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:testsgen.ProjectConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ProjectConfigRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProjectConfigRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:testsgen.ProjectConfigRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:testsgen.ProjectConfigRequest)
    MergeFrom(*source);
  }
}

void ProjectConfigRequest::MergeFrom(const ProjectConfigRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:testsgen.ProjectConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cmakeoptions_.MergeFrom(from.cmakeoptions_);
  if (from.has_projectcontext()) {
    _internal_mutable_projectcontext()->::testsgen::ProjectContext::MergeFrom(from._internal_projectcontext());
  }
  if (from.configmode() != 0) {
    _internal_set_configmode(from._internal_configmode());
  }
}

void ProjectConfigRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:testsgen.ProjectConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProjectConfigRequest::CopyFrom(const ProjectConfigRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testsgen.ProjectConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProjectConfigRequest::IsInitialized() const {
  return true;
}

void ProjectConfigRequest::InternalSwap(ProjectConfigRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  cmakeoptions_.InternalSwap(&other->cmakeoptions_);
  swap(projectcontext_, other->projectcontext_);
  swap(configmode_, other->configmode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProjectConfigRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProjectConfigResponse::InitAsDefaultInstance() {
  ::testsgen::_ProjectConfigResponse_default_instance_._instance.get_mutable()->progress_ = const_cast< ::testsgen::Progress*>(
      ::testsgen::Progress::internal_default_instance());
}
class ProjectConfigResponse::_Internal {
 public:
  static const ::testsgen::Progress& progress(const ProjectConfigResponse* msg);
};

const ::testsgen::Progress&
ProjectConfigResponse::_Internal::progress(const ProjectConfigResponse* msg) {
  return *msg->progress_;
}
void ProjectConfigResponse::clear_progress() {
  if (GetArenaNoVirtual() == nullptr && progress_ != nullptr) {
    delete progress_;
  }
  progress_ = nullptr;
}
ProjectConfigResponse::ProjectConfigResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:testsgen.ProjectConfigResponse)
}
ProjectConfigResponse::ProjectConfigResponse(const ProjectConfigResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from._internal_has_progress()) {
    progress_ = new ::testsgen::Progress(*from.progress_);
  } else {
    progress_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:testsgen.ProjectConfigResponse)
}

void ProjectConfigResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProjectConfigResponse_testgen_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&progress_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&progress_)) + sizeof(type_));
}

ProjectConfigResponse::~ProjectConfigResponse() {
  // @@protoc_insertion_point(destructor:testsgen.ProjectConfigResponse)
  SharedDtor();
}

void ProjectConfigResponse::SharedDtor() {
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete progress_;
}

void ProjectConfigResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProjectConfigResponse& ProjectConfigResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProjectConfigResponse_testgen_2eproto.base);
  return *internal_default_instance();
}


void ProjectConfigResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:testsgen.ProjectConfigResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && progress_ != nullptr) {
    delete progress_;
  }
  progress_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear();
}

const char* ProjectConfigResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .testsgen.ProjectConfigStatus type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::testsgen::ProjectConfigStatus>(val));
        } else goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "testsgen.ProjectConfigResponse.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .testsgen.Progress progress = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_progress(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProjectConfigResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testsgen.ProjectConfigResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .testsgen.ProjectConfigStatus type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testsgen.ProjectConfigResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // .testsgen.Progress progress = 3;
  if (this->has_progress()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::progress(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testsgen.ProjectConfigResponse)
  return target;
}

size_t ProjectConfigResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testsgen.ProjectConfigResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .testsgen.Progress progress = 3;
  if (this->has_progress()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *progress_);
  }

  // .testsgen.ProjectConfigStatus type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProjectConfigResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:testsgen.ProjectConfigResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ProjectConfigResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProjectConfigResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:testsgen.ProjectConfigResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:testsgen.ProjectConfigResponse)
    MergeFrom(*source);
  }
}

void ProjectConfigResponse::MergeFrom(const ProjectConfigResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:testsgen.ProjectConfigResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.has_progress()) {
    _internal_mutable_progress()->::testsgen::Progress::MergeFrom(from._internal_progress());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void ProjectConfigResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:testsgen.ProjectConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProjectConfigResponse::CopyFrom(const ProjectConfigResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testsgen.ProjectConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProjectConfigResponse::IsInitialized() const {
  return true;
}

void ProjectConfigResponse::InternalSwap(ProjectConfigResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(progress_, other->progress_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProjectConfigResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProjectTarget::InitAsDefaultInstance() {
}
class ProjectTarget::_Internal {
 public:
};

ProjectTarget::ProjectTarget()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:testsgen.ProjectTarget)
}
ProjectTarget::ProjectTarget(const ProjectTarget& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  // @@protoc_insertion_point(copy_constructor:testsgen.ProjectTarget)
}

void ProjectTarget::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProjectTarget_testgen_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ProjectTarget::~ProjectTarget() {
  // @@protoc_insertion_point(destructor:testsgen.ProjectTarget)
  SharedDtor();
}

void ProjectTarget::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProjectTarget::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProjectTarget& ProjectTarget::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProjectTarget_testgen_2eproto.base);
  return *internal_default_instance();
}


void ProjectTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:testsgen.ProjectTarget)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* ProjectTarget::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "testsgen.ProjectTarget.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "testsgen.ProjectTarget.path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "testsgen.ProjectTarget.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProjectTarget::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testsgen.ProjectTarget)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testsgen.ProjectTarget.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string path = 2;
  if (this->path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testsgen.ProjectTarget.path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_path(), target);
  }

  // string description = 3;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testsgen.ProjectTarget.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testsgen.ProjectTarget)
  return target;
}

size_t ProjectTarget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testsgen.ProjectTarget)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string path = 2;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // string description = 3;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProjectTarget::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:testsgen.ProjectTarget)
  GOOGLE_DCHECK_NE(&from, this);
  const ProjectTarget* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProjectTarget>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:testsgen.ProjectTarget)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:testsgen.ProjectTarget)
    MergeFrom(*source);
  }
}

void ProjectTarget::MergeFrom(const ProjectTarget& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:testsgen.ProjectTarget)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
}

void ProjectTarget::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:testsgen.ProjectTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProjectTarget::CopyFrom(const ProjectTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testsgen.ProjectTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProjectTarget::IsInitialized() const {
  return true;
}

void ProjectTarget::InternalSwap(ProjectTarget* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ProjectTarget::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProjectTargetsRequest::InitAsDefaultInstance() {
  ::testsgen::_ProjectTargetsRequest_default_instance_._instance.get_mutable()->projectcontext_ = const_cast< ::testsgen::ProjectContext*>(
      ::testsgen::ProjectContext::internal_default_instance());
}
class ProjectTargetsRequest::_Internal {
 public:
  static const ::testsgen::ProjectContext& projectcontext(const ProjectTargetsRequest* msg);
};

const ::testsgen::ProjectContext&
ProjectTargetsRequest::_Internal::projectcontext(const ProjectTargetsRequest* msg) {
  return *msg->projectcontext_;
}
ProjectTargetsRequest::ProjectTargetsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:testsgen.ProjectTargetsRequest)
}
ProjectTargetsRequest::ProjectTargetsRequest(const ProjectTargetsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_projectcontext()) {
    projectcontext_ = new ::testsgen::ProjectContext(*from.projectcontext_);
  } else {
    projectcontext_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:testsgen.ProjectTargetsRequest)
}

void ProjectTargetsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProjectTargetsRequest_testgen_2eproto.base);
  projectcontext_ = nullptr;
}

ProjectTargetsRequest::~ProjectTargetsRequest() {
  // @@protoc_insertion_point(destructor:testsgen.ProjectTargetsRequest)
  SharedDtor();
}

void ProjectTargetsRequest::SharedDtor() {
  if (this != internal_default_instance()) delete projectcontext_;
}

void ProjectTargetsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProjectTargetsRequest& ProjectTargetsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProjectTargetsRequest_testgen_2eproto.base);
  return *internal_default_instance();
}


void ProjectTargetsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:testsgen.ProjectTargetsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && projectcontext_ != nullptr) {
    delete projectcontext_;
  }
  projectcontext_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ProjectTargetsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .testsgen.ProjectContext projectContext = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_projectcontext(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProjectTargetsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testsgen.ProjectTargetsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .testsgen.ProjectContext projectContext = 1;
  if (this->has_projectcontext()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::projectcontext(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testsgen.ProjectTargetsRequest)
  return target;
}

size_t ProjectTargetsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testsgen.ProjectTargetsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .testsgen.ProjectContext projectContext = 1;
  if (this->has_projectcontext()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *projectcontext_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProjectTargetsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:testsgen.ProjectTargetsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ProjectTargetsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProjectTargetsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:testsgen.ProjectTargetsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:testsgen.ProjectTargetsRequest)
    MergeFrom(*source);
  }
}

void ProjectTargetsRequest::MergeFrom(const ProjectTargetsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:testsgen.ProjectTargetsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_projectcontext()) {
    _internal_mutable_projectcontext()->::testsgen::ProjectContext::MergeFrom(from._internal_projectcontext());
  }
}

void ProjectTargetsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:testsgen.ProjectTargetsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProjectTargetsRequest::CopyFrom(const ProjectTargetsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testsgen.ProjectTargetsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProjectTargetsRequest::IsInitialized() const {
  return true;
}

void ProjectTargetsRequest::InternalSwap(ProjectTargetsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(projectcontext_, other->projectcontext_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProjectTargetsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProjectTargetsResponse::InitAsDefaultInstance() {
  ::testsgen::_ProjectTargetsResponse_default_instance_._instance.get_mutable()->prioritytarget_ = const_cast< ::testsgen::ProjectTarget*>(
      ::testsgen::ProjectTarget::internal_default_instance());
}
class ProjectTargetsResponse::_Internal {
 public:
  static const ::testsgen::ProjectTarget& prioritytarget(const ProjectTargetsResponse* msg);
};

const ::testsgen::ProjectTarget&
ProjectTargetsResponse::_Internal::prioritytarget(const ProjectTargetsResponse* msg) {
  return *msg->prioritytarget_;
}
ProjectTargetsResponse::ProjectTargetsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:testsgen.ProjectTargetsResponse)
}
ProjectTargetsResponse::ProjectTargetsResponse(const ProjectTargetsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      targets_(from.targets_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_prioritytarget()) {
    prioritytarget_ = new ::testsgen::ProjectTarget(*from.prioritytarget_);
  } else {
    prioritytarget_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:testsgen.ProjectTargetsResponse)
}

void ProjectTargetsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProjectTargetsResponse_testgen_2eproto.base);
  prioritytarget_ = nullptr;
}

ProjectTargetsResponse::~ProjectTargetsResponse() {
  // @@protoc_insertion_point(destructor:testsgen.ProjectTargetsResponse)
  SharedDtor();
}

void ProjectTargetsResponse::SharedDtor() {
  if (this != internal_default_instance()) delete prioritytarget_;
}

void ProjectTargetsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProjectTargetsResponse& ProjectTargetsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProjectTargetsResponse_testgen_2eproto.base);
  return *internal_default_instance();
}


void ProjectTargetsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:testsgen.ProjectTargetsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  targets_.Clear();
  if (GetArenaNoVirtual() == nullptr && prioritytarget_ != nullptr) {
    delete prioritytarget_;
  }
  prioritytarget_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ProjectTargetsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .testsgen.ProjectTarget targets = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_targets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .testsgen.ProjectTarget priorityTarget = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_prioritytarget(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProjectTargetsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testsgen.ProjectTargetsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .testsgen.ProjectTarget targets = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_targets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_targets(i), target, stream);
  }

  // .testsgen.ProjectTarget priorityTarget = 2;
  if (this->has_prioritytarget()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::prioritytarget(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testsgen.ProjectTargetsResponse)
  return target;
}

size_t ProjectTargetsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testsgen.ProjectTargetsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .testsgen.ProjectTarget targets = 1;
  total_size += 1UL * this->_internal_targets_size();
  for (const auto& msg : this->targets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .testsgen.ProjectTarget priorityTarget = 2;
  if (this->has_prioritytarget()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *prioritytarget_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProjectTargetsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:testsgen.ProjectTargetsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ProjectTargetsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProjectTargetsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:testsgen.ProjectTargetsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:testsgen.ProjectTargetsResponse)
    MergeFrom(*source);
  }
}

void ProjectTargetsResponse::MergeFrom(const ProjectTargetsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:testsgen.ProjectTargetsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  targets_.MergeFrom(from.targets_);
  if (from.has_prioritytarget()) {
    _internal_mutable_prioritytarget()->::testsgen::ProjectTarget::MergeFrom(from._internal_prioritytarget());
  }
}

void ProjectTargetsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:testsgen.ProjectTargetsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProjectTargetsResponse::CopyFrom(const ProjectTargetsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testsgen.ProjectTargetsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProjectTargetsResponse::IsInitialized() const {
  return true;
}

void ProjectTargetsResponse::InternalSwap(ProjectTargetsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  targets_.InternalSwap(&other->targets_);
  swap(prioritytarget_, other->prioritytarget_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProjectTargetsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FileTargetsRequest::InitAsDefaultInstance() {
  ::testsgen::_FileTargetsRequest_default_instance_._instance.get_mutable()->projectcontext_ = const_cast< ::testsgen::ProjectContext*>(
      ::testsgen::ProjectContext::internal_default_instance());
}
class FileTargetsRequest::_Internal {
 public:
  static const ::testsgen::ProjectContext& projectcontext(const FileTargetsRequest* msg);
};

const ::testsgen::ProjectContext&
FileTargetsRequest::_Internal::projectcontext(const FileTargetsRequest* msg) {
  return *msg->projectcontext_;
}
FileTargetsRequest::FileTargetsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:testsgen.FileTargetsRequest)
}
FileTargetsRequest::FileTargetsRequest(const FileTargetsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_path().empty()) {
    path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from._internal_has_projectcontext()) {
    projectcontext_ = new ::testsgen::ProjectContext(*from.projectcontext_);
  } else {
    projectcontext_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:testsgen.FileTargetsRequest)
}

void FileTargetsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FileTargetsRequest_testgen_2eproto.base);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  projectcontext_ = nullptr;
}

FileTargetsRequest::~FileTargetsRequest() {
  // @@protoc_insertion_point(destructor:testsgen.FileTargetsRequest)
  SharedDtor();
}

void FileTargetsRequest::SharedDtor() {
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete projectcontext_;
}

void FileTargetsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FileTargetsRequest& FileTargetsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FileTargetsRequest_testgen_2eproto.base);
  return *internal_default_instance();
}


void FileTargetsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:testsgen.FileTargetsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && projectcontext_ != nullptr) {
    delete projectcontext_;
  }
  projectcontext_ = nullptr;
  _internal_metadata_.Clear();
}

const char* FileTargetsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "testsgen.FileTargetsRequest.path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .testsgen.ProjectContext projectContext = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_projectcontext(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FileTargetsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testsgen.FileTargetsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "testsgen.FileTargetsRequest.path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  // .testsgen.ProjectContext projectContext = 2;
  if (this->has_projectcontext()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::projectcontext(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testsgen.FileTargetsRequest)
  return target;
}

size_t FileTargetsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testsgen.FileTargetsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // .testsgen.ProjectContext projectContext = 2;
  if (this->has_projectcontext()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *projectcontext_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileTargetsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:testsgen.FileTargetsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FileTargetsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FileTargetsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:testsgen.FileTargetsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:testsgen.FileTargetsRequest)
    MergeFrom(*source);
  }
}

void FileTargetsRequest::MergeFrom(const FileTargetsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:testsgen.FileTargetsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.has_projectcontext()) {
    _internal_mutable_projectcontext()->::testsgen::ProjectContext::MergeFrom(from._internal_projectcontext());
  }
}

void FileTargetsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:testsgen.FileTargetsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileTargetsRequest::CopyFrom(const FileTargetsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testsgen.FileTargetsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileTargetsRequest::IsInitialized() const {
  return true;
}

void FileTargetsRequest::InternalSwap(FileTargetsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(projectcontext_, other->projectcontext_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FileTargetsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FileTargetsResponse::InitAsDefaultInstance() {
}
class FileTargetsResponse::_Internal {
 public:
};

FileTargetsResponse::FileTargetsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:testsgen.FileTargetsResponse)
}
FileTargetsResponse::FileTargetsResponse(const FileTargetsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      targets_(from.targets_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:testsgen.FileTargetsResponse)
}

void FileTargetsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FileTargetsResponse_testgen_2eproto.base);
}

FileTargetsResponse::~FileTargetsResponse() {
  // @@protoc_insertion_point(destructor:testsgen.FileTargetsResponse)
  SharedDtor();
}

void FileTargetsResponse::SharedDtor() {
}

void FileTargetsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FileTargetsResponse& FileTargetsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FileTargetsResponse_testgen_2eproto.base);
  return *internal_default_instance();
}


void FileTargetsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:testsgen.FileTargetsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  targets_.Clear();
  _internal_metadata_.Clear();
}

const char* FileTargetsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .testsgen.ProjectTarget targets = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_targets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FileTargetsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:testsgen.FileTargetsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .testsgen.ProjectTarget targets = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_targets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_targets(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:testsgen.FileTargetsResponse)
  return target;
}

size_t FileTargetsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:testsgen.FileTargetsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .testsgen.ProjectTarget targets = 1;
  total_size += 1UL * this->_internal_targets_size();
  for (const auto& msg : this->targets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileTargetsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:testsgen.FileTargetsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FileTargetsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FileTargetsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:testsgen.FileTargetsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:testsgen.FileTargetsResponse)
    MergeFrom(*source);
  }
}

void FileTargetsResponse::MergeFrom(const FileTargetsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:testsgen.FileTargetsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  targets_.MergeFrom(from.targets_);
}

void FileTargetsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:testsgen.FileTargetsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileTargetsResponse::CopyFrom(const FileTargetsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:testsgen.FileTargetsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileTargetsResponse::IsInitialized() const {
  return true;
}

void FileTargetsResponse::InternalSwap(FileTargetsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  targets_.InternalSwap(&other->targets_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FileTargetsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace testsgen
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::testsgen::DummyRequest* Arena::CreateMaybeMessage< ::testsgen::DummyRequest >(Arena* arena) {
  return Arena::CreateInternal< ::testsgen::DummyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::testsgen::DummyResponse* Arena::CreateMaybeMessage< ::testsgen::DummyResponse >(Arena* arena) {
  return Arena::CreateInternal< ::testsgen::DummyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::testsgen::RegisterClientRequest* Arena::CreateMaybeMessage< ::testsgen::RegisterClientRequest >(Arena* arena) {
  return Arena::CreateInternal< ::testsgen::RegisterClientRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::testsgen::RegisterClientResponse* Arena::CreateMaybeMessage< ::testsgen::RegisterClientResponse >(Arena* arena) {
  return Arena::CreateInternal< ::testsgen::RegisterClientResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::testsgen::FunctionTypeResponse* Arena::CreateMaybeMessage< ::testsgen::FunctionTypeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::testsgen::FunctionTypeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::testsgen::LogChannelRequest* Arena::CreateMaybeMessage< ::testsgen::LogChannelRequest >(Arena* arena) {
  return Arena::CreateInternal< ::testsgen::LogChannelRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::testsgen::LogEntry* Arena::CreateMaybeMessage< ::testsgen::LogEntry >(Arena* arena) {
  return Arena::CreateInternal< ::testsgen::LogEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::testsgen::ProjectContext* Arena::CreateMaybeMessage< ::testsgen::ProjectContext >(Arena* arena) {
  return Arena::CreateInternal< ::testsgen::ProjectContext >(arena);
}
template<> PROTOBUF_NOINLINE ::testsgen::SettingsContext* Arena::CreateMaybeMessage< ::testsgen::SettingsContext >(Arena* arena) {
  return Arena::CreateInternal< ::testsgen::SettingsContext >(arena);
}
template<> PROTOBUF_NOINLINE ::testsgen::SnippetRequest* Arena::CreateMaybeMessage< ::testsgen::SnippetRequest >(Arena* arena) {
  return Arena::CreateInternal< ::testsgen::SnippetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::testsgen::ProjectRequest* Arena::CreateMaybeMessage< ::testsgen::ProjectRequest >(Arena* arena) {
  return Arena::CreateInternal< ::testsgen::ProjectRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::testsgen::FileRequest* Arena::CreateMaybeMessage< ::testsgen::FileRequest >(Arena* arena) {
  return Arena::CreateInternal< ::testsgen::FileRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::testsgen::FolderRequest* Arena::CreateMaybeMessage< ::testsgen::FolderRequest >(Arena* arena) {
  return Arena::CreateInternal< ::testsgen::FolderRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::testsgen::LineRequest* Arena::CreateMaybeMessage< ::testsgen::LineRequest >(Arena* arena) {
  return Arena::CreateInternal< ::testsgen::LineRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::testsgen::FunctionRequest* Arena::CreateMaybeMessage< ::testsgen::FunctionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::testsgen::FunctionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::testsgen::ClassRequest* Arena::CreateMaybeMessage< ::testsgen::ClassRequest >(Arena* arena) {
  return Arena::CreateInternal< ::testsgen::ClassRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::testsgen::AssertionRequest* Arena::CreateMaybeMessage< ::testsgen::AssertionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::testsgen::AssertionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::testsgen::PredicateRequest* Arena::CreateMaybeMessage< ::testsgen::PredicateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::testsgen::PredicateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::testsgen::StubsResponse* Arena::CreateMaybeMessage< ::testsgen::StubsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::testsgen::StubsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::testsgen::TestsResponse* Arena::CreateMaybeMessage< ::testsgen::TestsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::testsgen::TestsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::testsgen::SourceLine* Arena::CreateMaybeMessage< ::testsgen::SourceLine >(Arena* arena) {
  return Arena::CreateInternal< ::testsgen::SourceLine >(arena);
}
template<> PROTOBUF_NOINLINE ::testsgen::FileCoverageSimplified* Arena::CreateMaybeMessage< ::testsgen::FileCoverageSimplified >(Arena* arena) {
  return Arena::CreateInternal< ::testsgen::FileCoverageSimplified >(arena);
}
template<> PROTOBUF_NOINLINE ::testsgen::TestFilter* Arena::CreateMaybeMessage< ::testsgen::TestFilter >(Arena* arena) {
  return Arena::CreateInternal< ::testsgen::TestFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::testsgen::CoverageAndResultsRequest* Arena::CreateMaybeMessage< ::testsgen::CoverageAndResultsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::testsgen::CoverageAndResultsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::testsgen::TestResultObject* Arena::CreateMaybeMessage< ::testsgen::TestResultObject >(Arena* arena) {
  return Arena::CreateInternal< ::testsgen::TestResultObject >(arena);
}
template<> PROTOBUF_NOINLINE ::testsgen::CoverageAndResultsResponse* Arena::CreateMaybeMessage< ::testsgen::CoverageAndResultsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::testsgen::CoverageAndResultsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::testsgen::HeartbeatResponse* Arena::CreateMaybeMessage< ::testsgen::HeartbeatResponse >(Arena* arena) {
  return Arena::CreateInternal< ::testsgen::HeartbeatResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::testsgen::ProjectConfigRequest* Arena::CreateMaybeMessage< ::testsgen::ProjectConfigRequest >(Arena* arena) {
  return Arena::CreateInternal< ::testsgen::ProjectConfigRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::testsgen::ProjectConfigResponse* Arena::CreateMaybeMessage< ::testsgen::ProjectConfigResponse >(Arena* arena) {
  return Arena::CreateInternal< ::testsgen::ProjectConfigResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::testsgen::ProjectTarget* Arena::CreateMaybeMessage< ::testsgen::ProjectTarget >(Arena* arena) {
  return Arena::CreateInternal< ::testsgen::ProjectTarget >(arena);
}
template<> PROTOBUF_NOINLINE ::testsgen::ProjectTargetsRequest* Arena::CreateMaybeMessage< ::testsgen::ProjectTargetsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::testsgen::ProjectTargetsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::testsgen::ProjectTargetsResponse* Arena::CreateMaybeMessage< ::testsgen::ProjectTargetsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::testsgen::ProjectTargetsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::testsgen::FileTargetsRequest* Arena::CreateMaybeMessage< ::testsgen::FileTargetsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::testsgen::FileTargetsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::testsgen::FileTargetsResponse* Arena::CreateMaybeMessage< ::testsgen::FileTargetsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::testsgen::FileTargetsResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
